
Функция factexpGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL.Получить("MyMethod");
	Ответ.УстановитьТелоИзСтроки("Тест_GET");
	Ответ.Заголовки.Вставить("Content-Type", "text/html;charset=utf-8");
	Возврат Ответ;
КонецФункции

Функция factexpPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL.Получить("MyMethod");
	СтрокаОтвет = "";
	Если ИмяМетода = "trdz" Тогда
		Данные_строка = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8) ;
		Данные = MES_РаботаСДаннымиСервер.JSONВДанные(Данные_строка);
		Результат = ОбработкаПередЗагрузкойТрудоазтрат(Данные) ;
		Если не Результат = Ложь Тогда
			СтрокаОтвет = Результат;
			Ответ.КодСостояния = 500;
		КонецЕсли;
	КонецЕсли;
	Ответ.УстановитьТелоИзСтроки(СтрокаОтвет);
	Возврат Ответ;
КонецФункции

Функция factexpDELETE(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL.Получить("MyMethod");
	СтрокаОтвет = "";
	Если ИмяМетода = "trdz" Тогда
		Данные_строка = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8) ;
		Данные = MES_РаботаСДаннымиСервер.JSONВДанные(Данные_строка);
		Результат = ОбработкаПередУдалениемТрудоазтрат(Данные) ;
		Если не Результат = Ложь Тогда
			СтрокаОтвет = Результат;
			Ответ.КодСостояния = 500;
		КонецЕсли;
	КонецЕсли;
	Ответ.УстановитьТелоИзСтроки(СтрокаОтвет);
	Возврат Ответ;
КонецФункции

Функция factexpPATCH(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL.Получить("MyMethod");
	СтрокаОтвет = "";
	Если ИмяМетода = "trdz" Тогда
		Данные_строка = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8) ;
		Данные = MES_РаботаСДаннымиСервер.JSONВДанные(Данные_строка);
		Результат = ОбработкаДанныхПатч(Данные) ;
		Если не Результат = Ложь Тогда
			СтрокаОтвет = Результат;
			Ответ.КодСостояния = 500;
		КонецЕсли;
	КонецЕсли;
	Ответ.УстановитьТелоИзСтроки(СтрокаОтвет);
	Возврат Ответ;
КонецФункции


&НаСервере
Функция ОбработкаДанныхПатч(Данные)
	Результат_ошибка = Ложь;
	УидДок = Данные["_RefKeyDoc"];
	ИмяДок = Данные["_NameDoc"];
	СсылкаЭтап = Документы.ЭтапПроизводства2_2.ПолучитьСсылку(Новый УникальныйИдентификатор(УидДок));
	Если СсылкаЭтап = Документы.ЭтапПроизводства2_2.ПустаяСсылка() или СсылкаЭтап = Неопределено тогда
		Результат_ошибка = СтрШаблон("Не найден этап %1 в ЕРП", ИмяДок);
		Возврат Результат_ошибка;
	КонецЕсли;

	ЭтапПроизводства = СсылкаЭтап.ПолучитьОбъект();

	НачатьТранзакцию();

	Для каждого элт Из Данные Цикл
		если Лев(элт.Ключ, 1) = "_" Тогда
			Продолжить;
		Иначе
			Попытка
				ТекстЗначение = элт.Значение;
				Если элт.Ключ = "Статус" Тогда
					Попытка
						ТекстЗначение = Перечисления.СтатусыЭтаповПроизводства2_2[ТекстЗначение];
					Исключение
						ОтменитьТранзакцию();
						Результат_ошибка = СтрШаблон("Не удалось определить значение в БД для %1 реквизит %2 значение %3 (%4)",ИмяДок, элт.Ключ, элт.Значение,ОписаниеОшибки());
						Возврат Результат_ошибка;
					КонецПопытки;

				КонецЕсли;
				   //БеляковАГ, Пауэрз, 20.01.2025
				   //Постановщик: Нисина
				   //Краткое описание цели: при запкуске этапа не обновляется фактическаяДатаНачала
				   //Краткое описание правки: получение даты как параметра и установка в реквизит
				   //Журнал: https://bitrix24.kelast.ru/docs/pub/89a19d9b18995d279d8e7aa189cfb495/goToEdit/?&
				   //+++++++++++++++++++++++++++++++++++++

				Если элт.Ключ = "ФактическоеНачалоЭтапа" Тогда
					Попытка
						ТекстЗначение = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ТекстЗначение);
					Исключение
						ОтменитьТранзакцию();
						Результат_ошибка = СтрШаблон("Не удалось определить значение в БД для %1 реквизит %2 значение %3 (%4)",ИмяДок, элт.Ключ, элт.Значение,ОписаниеОшибки());
						Возврат Результат_ошибка;
					КонецПопытки;
				КонецЕсли;
                	//БеляковАГ, Пауэрз, 20.01.2025
				   //-------------------------------------

				ЭтапПроизводства[элт.Ключ] = ТекстЗначение;
			Исключение
				ОтменитьТранзакцию();
				Результат_ошибка = СтрШаблон("Не удалось установить для %1 реквизит %2 значение %3 (%4)",ИмяДок, элт.Ключ, элт.Значение,ОписаниеОшибки());
				Возврат Результат_ошибка;
			КонецПопытки;

		КонецЕсли;
	КонецЦикла;
	ЭтапПроизводства.Записать(РежимЗаписиДокумента.Проведение);
	ЗафиксироватьТранзакцию();
	Возврат ЛОЖЬ;
КонецФункции




&НаСервере
Функция ОбработкаПередУдалениемТрудоазтрат(Данные)
	Результат_ошибка = Ложь;
	соответствие_результат = новый Соответствие;
	//Обход массива трудов
	Для каждого элемент из Данные Цикл
		etap_Ref = элемент["etap_Ref"];
		НомерЭтапа = элемент["etap_name"];
		СсылкаЭтап = Документы.ЭтапПроизводства2_2.ПолучитьСсылку(Новый УникальныйИдентификатор(etap_Ref));
		Если СсылкаЭтап = Документы.ЭтапПроизводства2_2.ПустаяСсылка() или СсылкаЭтап = Неопределено тогда
			Результат_ошибка = СтрШаблон("Не найден этап %1 в ЕРП", НомерЭтапа);
			Возврат Результат_ошибка;
		КонецЕсли;
		текст_Ключ_мес = элемент["НомерЧертежа"];
		Если  соответствие_результат.Получить(СсылкаЭтап) = Неопределено Тогда
			масс_черт = новый Массив;
			соответствие_результат.Вставить(СсылкаЭтап,масс_черт);
		КонецЕсли;
		струк_элемента = новый Структура;
		струк_элемента.Вставить("НомерЧертежа", текст_Ключ_мес);

		соответствие_результат[СсылкаЭтап].Добавить(струк_элемента);
	КонецЦикла;

	Результат_ошибка = УдалитьТрудозатратыВЭтапыНаСервере(соответствие_результат);
	Возврат Результат_ошибка;
КонецФункции



&НаСервере
Функция ОбработкаПередЗагрузкойТрудоазтрат(Данные, ЗапросУдалить=Ложь)
	Результат_ошибка = Ложь;
	соответ_результат = новый Соответствие;
	соответ_минДата = новый Соответствие;
	Для каждого ГодПу из Данные Цикл
		масс_ГодПУ = СтрРазделить(ГодПу.Ключ,"$");
		Год = масс_ГодПУ[1];
		ПУ = масс_ГодПУ[0];
		ТипМк = ГодПу.Значение["Тип"];
		ПодтипМК = ГодПу.Значение["Подтип"];
		Ref_Key_py = ГодПу.Значение["Ref_Key_py"];
		Ref_Key_spec = ГодПу.Значение["Ref_Key_spec"];
		Для каждого Этап из ГодПу.Значение["Этапы"] Цикл
			НомерЭтапа = Этап.Ключ;
			СсылкаЭтап = ОпределитьЭтапПроизводстваНаСервере(НомерЭтапа,Ref_Key_py);
			Если СсылкаЭтап = Документы.ЭтапПроизводства2_2.ПустаяСсылка() или СсылкаЭтап = Неопределено тогда
				Результат_ошибка = СтрШаблон("Не найден этап %1 в ЕРП", НомерЭтапа);
				Возврат Результат_ошибка;
			КонецЕсли;
			мас_Труды = Этап.Значение["Традозатраты"] ;
			мас_Материалы = Этап.Значение["Расход"] ;
			Если соответ_минДата.Получить(СсылкаЭтап) = Неопределено Тогда
				соответ_минДата.Вставить(СсылкаЭтап, ТекущаяДата());
			КонецЕсли ;
			//Обход массива трудов
			Для каждого элемент из мас_Труды Цикл
				текст_Датавыполнения = элемент["Дата выполнения"];
				текст_Количество_мин = элемент["Количество_мин"];
				текст_Ключ_мес = элемент["Ключ_мес"];
				текст_Видработ = элемент["Вид работ"];
				текст_Статьякалькуляции = элемент["Статья калькуляции"];
				текст_Исполнитель = элемент["Исполнитель"];
				текст_НаименованиеЭтапа = элемент["НаименованиеЭтапа"];

				ФизическоеЛицоФИО = ОпределитьФизическоеЛицоНаСервере(текст_Исполнитель);
				Если ФизическоеЛицоФИО = Справочники.ФизическиеЛица.ПустаяСсылка()  тогда
					Результат_ошибка = СтрШаблон("Не найден исполнитель %1 в ЕРП", текст_Исполнитель);
					Возврат Результат_ошибка;
				КонецЕсли;

				ДатаТрудозатрат = MES_РаботаСДаннымиСервер.ПолучитьДатуИзФорматМЕС(текст_Датавыполнения);
				//БеляковАГ, Пауэрз, 13.01.2025
				//Постановщик: Нисина
				//Краткое описание цели: Обновлять дату начала этапа втоматом
				//Краткое описание правки: получаение минимальной даты  изх данных трудозатрат
				//+++++++++++++++++++++++++++++++++++++

				Если соответ_минДата.Получить(СсылкаЭтап) > ДатаТрудозатрат Тогда
					соответ_минДата[СсылкаЭтап] = ДатаТрудозатрат;
				КонецЕсли ;
				//-------------------------------------

				СтатьяКалькуляции = Справочники.СтатьиКалькуляции.НайтиПоНаименованию(текст_Статьякалькуляции);

				Видработ = Справочники.ВидыРаботСотрудников.НайтиПоНаименованию(текст_Видработ,Истина);
				Если Видработ = Справочники.ВидыРаботСотрудников.ПустаяСсылка()  тогда
					Результат_ошибка = СтрШаблон("Не найден Вид работ `%1` в ЕРП", текст_Видработ);
					Возврат Результат_ошибка;
				КонецЕсли;

				струк_элемента = новый Структура;
				струк_элемента.Вставить("ЭтапПроизводства", СсылкаЭтап);
				струк_элемента.Вставить("Видработ", Видработ);
				струк_элемента.Вставить("ПродолжительностьОперацииМин", текст_Количество_мин);
				струк_элемента.Вставить("ФизическоеЛицо", ФизическоеЛицоФИО);
				струк_элемента.Вставить("ДатаТрудозатрат", ДатаТрудозатрат);
				струк_элемента.Вставить("НомерЧертежа", текст_Ключ_мес);
				струк_элемента.Вставить("СтатьяКалькуляции", СтатьяКалькуляции);
				Если соответ_результат.Получить(СсылкаЭтап) = Неопределено Тогда
					масс_трудов_результат = Новый Массив;
					соответ_результат.Вставить(СсылкаЭтап, масс_трудов_результат);
				КонецЕсли ;
				соответ_результат[СсылкаЭтап].Добавить(струк_элемента);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Если ЗапросУдалить = Истина Тогда
		Результат_ошибка = УдалитьТрудозатратыВЭтапыНаСервере(соответ_результат);
	Иначе

		Результат_ошибка = ЗагрузитьТрудозатратыВЭтапыНаСервере(соответ_результат,соответ_минДата);
	КонецЕсли;

	Возврат Результат_ошибка;
КонецФункции



&НаСервере
Функция  УдалитьТрудозатратыВЭтапыНаСервере(соответствие_результат)
	НачатьТранзакцию();

	Попытка

		Для Каждого Элемент  ИЗ соответствие_результат Цикл  // дзТрудозатратыЗагрузить.Строки
			//ПодразделениеЭтапа=Операция.ЭтапПроизводства.Подразделение;
			этапСсылка = Элемент.Ключ;
			масс_структ_черт =  Элемент.Значение;
			ЭтапПроизводства = этапСсылка.ПолучитьОбъект();

			Если НЕ ЭтапПроизводства.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат Тогда
				ОтменитьТранзакцию();
				Возврат "Этап производства должен быть в статусе ""начат""! Строка не удалена";
			Иначе
				для каждого струк_чертеж из  масс_структ_черт  цикл
					чертеж = струк_чертеж.НомерЧертежа;
					Строка_тч = ЭтапПроизводства.Трудозатраты.Найти(чертеж,"НомерЧертежа");
					Если ЗначениеЗаполнено(Строка_тч) Тогда
						ЭтапПроизводства.Трудозатраты.Удалить(Строка_тч);
					Иначе
						ОтменитьТранзакцию();
						Возврат СтрШаблон("Строка с  номером %1 журнала МЕС в этапе производства отсутствует",чертеж);
					КонецЕсли;
				КонецЦикла;
				ЭтапПроизводства.Записать(РежимЗаписиДокумента.Проведение);

			КонецЕсли;

		КонецЦикла;

		ЗафиксироватьТранзакцию();
		Возврат ЛОЖЬ;
	Исключение

		ОтменитьТранзакцию();
		Возврат ОписаниеОшибки();

	КонецПопытки;

КонецФункции



&НаСервере
Функция  ЗагрузитьТрудозатратыВЭтапыНаСервере(соответ_результат,соответ_минДата)
	НачатьТранзакцию();

	Попытка

		Для Каждого элемент ИЗ соответ_результат Цикл
			ЭтапПроизводства_ссылка = элемент.Ключ;
			строки_трудов = элемент.Значение;
			ЭтапПроизводства = ЭтапПроизводства_ссылка.ПолучитьОбъект();

			//БеляковАГ, Пауэрз, 13.01.2025
			//Постановщик: Нисина
			//Краткое описание цели: Обновлять дату начала этапа втоматом
			//Краткое описание правки: получаение минимальной даты из данных трудозатрат
			//Журнал
			//+++++++++++++++++++++++++++++++++++++
			Если соответ_минДата[ЭтапПроизводства_ссылка] < ЭтапПроизводства.ФактическоеНачалоЭтапа Тогда
				ЭтапПроизводства.ФактическоеНачалоЭтапа = 	соответ_минДата[ЭтапПроизводства_ссылка];
			КонецЕсли;
			//-------------------------------------


			Если НЕ ЭтапПроизводства.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат Тогда
				ОтменитьТранзакцию();
				Возврат "Этап производства должен быть в статусе ""начат""! Строка не добавлена";
			Иначе
				Для каждого строка_трудов из строки_трудов цикл

					Строка_тч = ЭтапПроизводства.Трудозатраты.Найти(строка_трудов.НомерЧертежа,"НомерЧертежа");
					Если Строка_тч = Неопределено или Не ЗначениеЗаполнено(Строка_тч) Тогда
						НоваяСтрока = ЭтапПроизводства.Трудозатраты.Добавить();
						НоваяСтрока.ВидРабот = строка_трудов.ВидРабот;
						НоваяСтрока.Количество=Окр(строка_трудов.ПродолжительностьОперацииМин,3);
						НоваяСтрока.НазначениеРабот = "";
						НоваяСтрока.Исполнитель = строка_трудов.ФизическоеЛицо;
						НоваяСтрока.Выполнено = Истина;
						НоваяСтрока.ДатаВыполнения	= строка_трудов.ДатаТрудозатрат;
						НоваяСтрока.НомерЧертежа = строка_трудов.НомерЧертежа;
						НоваяСтрока.СтатьяКалькуляции = строка_трудов.СтатьяКалькуляции;

						НоваяСтрока.Подразделение=ЭтапПроизводства.Подразделение;



					Иначе
						ОтменитьТранзакцию();
						Возврат СтрШаблон("Строка с таким номером %1 журнала МЕС в этапе производства уже существует",Строка_тч.НомерЧертежа);
					КонецЕсли;
				КонецЦикла;
				ЭтапПроизводства.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;

		КонецЦикла;

		ЗафиксироватьТранзакцию();
		Возврат ЛОЖЬ;
	Исключение

		ОтменитьТранзакцию();
		Возврат ОписаниеОшибки();

	КонецПопытки;

КонецФункции

&НаСервере
Функция НайтиПодразделение(Стр)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыРаботСотрудников.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК ВидыРаботСотрудников
	|ГДЕ
	|	ВидыРаботСотрудников.Наименование ПОДОБНО &Наименование");
	Запрос.УстановитьПараметр("Наименование", ""+Стр+"%Па%");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат "";
КонецФункции


&НаСервере
Функция ОпределитьЭтапПроизводстваНаСервере(НомерЭтапа,Ref_Key_py)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;

	// Установка значений параметров
	Запрос.УстановитьПараметр("УИзп", Новый УникальныйИдентификатор(Ref_Key_py));
	Запрос.УстановитьПараметр("Номер", НомерЭтапа);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапПроизводства2_2.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Номер = &Номер
	|	И УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЭтапПроизводства2_2.Распоряжение.Ссылка) = &УИзп";
	Результат = Запрос.Выполнить();

	// Выборка
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции


&НаСервере
Функция ОпределитьФизическоеЛицоНаСервере(ФизическоеЛицоФИО)

	УстановитьПривилегированныйРежим(Истина);
	Результат = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФизическоеЛицоФИО,Истина);
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;

КонецФункции

Функция sysexchangeGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(400);
	ИмяМетода = Запрос.ПараметрыURL.Получить("MyMethod");
	ИмяМетода2 = Запрос.ПараметрыURL.Получить("MyMethod2");
	Если ИмяМетода = "nomen" Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
		MES_НаправленВМЕС = ПараметрыЗапроса.Получить("senttomes");
		MES_ДокументДОКС_гуид = ПараметрыЗапроса.Получить("carddoccreated");
		Если   ИмяМетода2 = "all" Тогда
			УИД = Неопределено ;
		Иначе
			УИД = ИмяМетода2    ;
		КонецЕсли;
		Данные = ПолучитьНоменклатуру(УИД,MES_НаправленВМЕС,MES_ДокументДОКС_гуид);
		СтруктураДанныхJSON = Новый Структура;
		СтруктураДанныхJSON.Вставить("data",Данные);

		СтрокаJS = MES_РаботаСДаннымиСервер.ПолучитьСтрокуJSON(СтруктураДанныхJSON);


		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8" );
		Ответ.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	ИначеЕсли ИмяМетода = "enumeration" Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Данные = ПолучитьПеречисление(ИмяМетода2);
		СтруктураДанныхJSON = Новый Структура;
		СтруктураДанныхJSON.Вставить("data",Данные);

		СтрокаJS = MES_РаботаСДаннымиСервер.ПолучитьСтрокуJSON(СтруктураДанныхJSON);


		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8" );
		Ответ.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	ИначеЕсли ИмяМетода = "wet_request" Тогда
		Данные_строка_JSON = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8) ;
		Данные_JSON = MES_РаботаСДаннымиСервер.JSONВДанные(Данные_строка_JSON);
		ДанныеЗапроса = ПолучитьДанные(Данные_JSON);
		Если ДанныеЗапроса <> Неопределено Тогда
		   Ответ = Новый HTTPСервисОтвет(200);
		КонецЕсли;
		СтруктураДанныхJSON = Новый Структура;
		СтруктураДанныхJSON.Вставить("data",ДанныеЗапроса);

		СтрокаJS = MES_РаботаСДаннымиСервер.ПолучитьСтрокуJSON(СтруктураДанныхJSON);


		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8" );
		Ответ.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;

	КонецЕсли;
	Ответ.Заголовки.Вставить("Content-Type", "text/html;charset=utf-8");
	Возврат Ответ;
КонецФункции


&НаСервере
Функция ПолучитьДанные(Данные_JSON)
     Попытка
	     //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

		Запрос = Новый Запрос;
		// Установка значений параметров
		Запрос.Текст =  Данные_JSON["text"] ;


		Для каждого пара Из Данные_JSON Цикл
			Если пара.Ключ = "text" Тогда
				Продолжить;
			КонецЕсли;
			Если пара.Ключ = "refs" Тогда
				Для каждого пара_refs Из пара.Значение Цикл
					имя_перем = пара_refs.Ключ;

					путь =  пара_refs.Значение["путь"];
					уид =   пара_refs.Значение["уид"];
					ссылка = Неопределено;
					Выполнить("ссылка = " + путь + ".ПолучитьСсылку(Новый УникальныйИдентификатор(""" + уид + """))");
					Если ссылка = Неопределено Тогда
						 Возврат Неопределено;
					КонецЕсли;
					Запрос.УстановитьПараметр(имя_перем, ссылка);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			Запрос.УстановитьПараметр(пара.Ключ, пара.Значение);
		КонецЦикла;




		РезультатЗапроса = Запрос.Выполнить();

		МассивПеречисление = MES_РаботаСДаннымиСервер.РезультатЗапросаВМассив(РезультатЗапроса) ;

		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		Возврат МассивПеречисление



	 Исключение
	    Возврат Неопределено
	 КонецПопытки;

КонецФункции //




&НаСервере
Функция ПолучитьПеречисление(ИмяПеречисления)
     Если НЕ Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Перечисление." + ИмяПеречисления;

		РезультатЗапроса = Запрос.Выполнить();
		МассивПеречисление = MES_РаботаСДаннымиСервер.РезультатЗапросаВМассив(РезультатЗапроса) ;

		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		Возврат МассивПеречисление
	КонецЕсли;
	Возврат Неопределено

КонецФункции // ПолучитьПеречисление()


&НаСервере
Функция ПолучитьНоменклатуру(УИД=Неопределено,MES_НаправленВМЕС = Неопределено, MES_ДокументДОКС_гуид = Неопределено)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	МассивНомен = Новый Массив;

	Запрос = Новый Запрос;
	Постфикс = "" ;
	Постфикс2 = "" ;
	Постфикс3 = "" ;

	Если УИД <> Неопределено Тогда
		Постфикс = "	И УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Номенклатура.Ссылка) = &УИД";
		Запрос.УстановитьПараметр("УИД",новый УникальныйИдентификатор(УИД));
	КонецЕсли;

	Если MES_НаправленВМЕС <> Неопределено Тогда
		Постфикс2 = "	И Номенклатура.MES_НаправленВМЕС = &MES_НаправленВМЕС";
		Запрос.УстановитьПараметр("MES_НаправленВМЕС",Булево(MES_НаправленВМЕС));
	КонецЕсли;

	Если MES_ДокументДОКС_гуид <> Неопределено Тогда
		Постфикс3 = "	И Номенклатура.MES_ДокументДОКС_гуид = &MES_СозданДокументДОКС";
		Запрос.УстановитьПараметр("MES_ДокументДОКС_гуид",Булево(MES_ДокументДОКС_гуид) );
	КонецЕсли;


	Запрос.УстановитьПараметр("ЭтоГруппа", Ложь);
	Запрос.УстановитьПараметр("Ссылка",
	Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(
	"0F1FEE33-0F04-11E7-80C0-4CCC6A67082D")));// _1. Продукция (Справочники.ВидыНоменклатуры)


	Запрос.Текст =
	СтрШаблон(
	"ВЫБРАТЬ
	|	Номенклатура.MES_НаправленВМЕС КАК MES_НаправленВМЕС,
	|	Номенклатура.MES_ДокументДОКС_гуид КАК MES_СозданДокументДОКС,
	|	Номенклатура.Наименование КАК Наименование,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Номенклатура.Ссылка) КАК УИД
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (ВидыНоменклатуры.Ссылка = Номенклатура.ВидНоменклатуры)
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В ИЕРАРХИИ (&Ссылка)
	|	И Номенклатура.ЭтоГруппа = &ЭтоГруппа %1 %2 %3;",Постфикс
	,Постфикс2
	,Постфикс3) ;


	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СтрукНомер = Новый Структура();
		СтрукНомер.Вставить("MES_НаправленВМЕС",ВыборкаДетальныеЗаписи.MES_НаправленВМЕС);
		СтрукНомер.Вставить("MES_ДокументДОКС_гуид",ВыборкаДетальныеЗаписи.MES_СозданДокументДОКС);
		СтрукНомер.Вставить("Наименование",ВыборкаДетальныеЗаписи.Наименование);
		СтрукНомер.Вставить("УИД", "" + ВыборкаДетальныеЗаписи.УИД);

		МассивНомен.Добавить(СтрукНомер);
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат МассивНомен

КонецФункции // ПолучитьВсюНоменклатуру()

Функция sysexchangePATCH(Запрос)
	Ответ = Новый HTTPСервисОтвет(400);
	ИмяМетода = Запрос.ПараметрыURL.Получить("MyMethod");
	ИмяМетода2 = Запрос.ПараметрыURL.Получить("MyMethod2");
	СтрокаОтвет = "";
	Если ИмяМетода = "nomen" Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Данные_строка = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8) ;
		Данные = MES_РаботаСДаннымиСервер.JSONВДанные(Данные_строка);
		УИД = ИмяМетода2    ;
		Результат = ОбновлениеНоменклатуры(Данные, УИД) ;
		Если не Результат = Ложь Тогда
			СтрокаОтвет = Результат;
			Ответ.КодСостояния = 500;
		КонецЕсли;
	КонецЕсли;
	Ответ.УстановитьТелоИзСтроки(СтрокаОтвет);
	Возврат Ответ;
КонецФункции


&НаСервере
Функция ОбновлениеНоменклатуры(Данные,УИД)
	Результат_ошибка = Ложь;

	СсылкаНомен = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	Если СсылкаНомен = Справочники.Номенклатура.ПустаяСсылка() или СсылкаНомен = Неопределено тогда
		Результат_ошибка = СтрШаблон("Не найдена номенклатура  УИД %1 в ЕРП", СсылкаНомен);
		Возврат Результат_ошибка;
	КонецЕсли;

	Номен = СсылкаНомен.ПолучитьОбъект();


	MES_НаправленВМЕС = Данные.Получить("senttomes");
	MES_ДокументДОКС_гуид = Данные.Получить("carddoccreated");
	НачатьТранзакцию();
	Если не MES_НаправленВМЕС  = Неопределено Тогда
		Номен.MES_НаправленВМЕС = Булево(MES_НаправленВМЕС);
	КонецЕсли;
	Если не MES_ДокументДОКС_гуид  = Неопределено Тогда
		Номен.MES_ДокументДОКС_гуид =  MES_ДокументДОКС_гуид;

	КонецЕсли;
	Номен.Записать();
	ЗафиксироватьТранзакцию();
	Возврат ЛОЖЬ;



КонецФункции // ОбновлениеНоменклатуры()

Функция resspecPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL.Получить("MyMethod");
	СтрокаОтвет = "";
		//БеляковАГ, Пауэрз, 01.04.2025
	//Постановщик: Тимошенко
	//Краткое описание цели: Интеграция по бесшовной работе с ресурсными МЕС-1С
	//Краткое описание правки: Доработка АПИ на создание/чистку/удаление ресурсной спецификации
	//Журнал: https://bitrix24.kelast.ru/docs/pub/89a19d9b18995d279d8e7aa189cfb495/goToEdit/?&
	//+++++++++++++++++++++++++++++++++++++

	Если ИмяМетода = "make_res" Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Данные_строка = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8) ;
		Данные = MES_РаботаСДаннымиСервер.JSONВДанные(Данные_строка);

		результат = СозданиеРесурсной(Данные);
		Если результат["ЕстьОшибки"] = Истина Тогда
			Ответ.КодСостояния = 500;
		КонецЕсли;
		СтрокаОтвет = результат;
	КонецЕсли;
	//БеляковАГ, Пауэрз, 01.04.2025
	//-------------------------------------

	СтрокаJS = MES_РаботаСДаннымиСервер.ПолучитьСтрокуJSON(СтрокаОтвет);
	Ответ.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
КонецФункции


&НаСервере
Функция СозданиеРесурсной(Данные)
	результат = Новый Структура;
	результат.Вставить("Код",Неопределено);
	результат.Вставить("ЕстьОшибки",Истина);
	Ошибка = новый Массив();
	Ошибка.Добавить("Непредвиденная ошибка создания ресурсной");
	результат.Вставить("Ошибки",Ошибка);

	НачатьТранзакцию();
	Попытка
		результат = СоздатьСпецификацию(Данные);

		Если результат["ЕстьОшибки"] = Ложь тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;

	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

	Возврат результат;
КонецФункции // СозданиеРесурсной()


&НаСервере
Функция СоздатьСпецификацию(Данные)
	Шапка = Данные["hat"];
	ДанныеРес =  Данные["data"];

	результат = Новый Структура;
	результат.Вставить("Код",Неопределено);
	результат.Вставить("ЕстьОшибки",Ложь);
	результат.Вставить("Ошибки",новый Массив);
	результат.Вставить("Ссылка",Неопределено);

	ОснНом = Справочники.Номенклатура.НайтиПоКоду(Шапка["ОсновноеИзделиеКод"]);
	Если ОснНом = Неопределено Тогда
		результат["ЕстьОшибки"] = Истина;
		результат["Ошибки"].Добавить("Не найден Номенклатура") ;
		Возврат результат;
	КонецЕсли;

	код_рес =  Шапка.Получить("Код");
	Если код_рес = Неопределено Тогда
		СпРО = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
	Иначе
		СпРС = Справочники.РесурсныеСпецификации.НайтиПоКоду(код_рес);
		Если СпРС = Неопределено или СпРС.Пустая() Тогда
			результат["ЕстьОшибки"] = Истина;
			результат["Ошибки"].Добавить("Не найдена спецификация  " + код_рес + " в РесурсныеСпецификации") ;
			Возврат результат;
		КонецЕсли;
		СпРО = СпРС.ПолучитьОбъект();
	КонецЕсли;

	СпРО.НачалоДействия = ОбщегоНазначенияКлиентСервер.СтрокаВДату(Шапка["НачалоДействия"]);
	СпРО.КонецДействия = ОбщегоНазначенияКлиентСервер.СтрокаВДату(Шапка["КонецДействия"]);
	СпРО.Наименование = Шапка["Наименование ресурсной"];
	СпРО.ОсновноеИзделиеНоменклатура = ОснНом;
	СпРО.ОсновноеИзделиеКоличествоУпаковок = 1;
	СпРО.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;

	ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию(Шапка["ТекущийПользователь"]);
	Если ТекущийПользователь  = Неопределено Тогда
		результат["ЕстьОшибки"] = Истина;
		результат["Ошибки"].Добавить("Не найден " + Шапка["ТекущийПользователь"] + " в Пользователи 1с") ;
		Возврат результат;
	КонецЕсли;
	СпРО.Ответственный = ТекущийПользователь;

	СпРО.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
	СпРО.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры;
	СпРО.ВариантПодбораВДокументы = Перечисления.ВариантыПодбораСпецификацииВДокументы.Автоматически;

	СтрВИ = СпРО.ВыходныеИзделия.Добавить();
	СтрВИ.Номенклатура = ОснНом;
	СтрВИ.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	СтрВИ.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	СтрВи.КоличествоУпаковок = 1;
	СтрВИ.ОбработатьПоСпецификации = Ложь;
	СтрВИ.ДоляСтоимости = 100;
	Если Шапка["Сохранять"] = Истина Тогда
	    СпРО.Записать();

		СпрРССсылка    = СпРО.Ссылка;

		РегСпец = РегистрыСведений.ЗначенияПараметровНазначенияСпецификаций.СоздатьМенеджерЗаписи();
		РегСпец.Спецификация = СпрРССсылка;
		РегСпец.ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер;
		РегСпец.Условие = "Равно";
		РегСпец.Значение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Планово-диспетчерский отдел Производства (Пауэрз)");
		РегСпец.Записать(Истина);
	КонецЕсли;



	НПП = 1;

	СтатьяКалькуляцииФОТ = Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Основной ФОТ");
	// цикл  C:\1c\1С доработки\выгрузка ресурсной
	//Функция СоздатьСпецификацию(ОснНом, Элемент, ОсновнаяСпек=0, Этап) в ВыгрузкаJSON
	Для каждого элт из ДанныеРес Цикл
		НомерЭтапа = НПП ;
		НомерСледующегоЭтапа = НПП+1    ;
		Если ДанныеРес.Количество() = НомерЭтапа Тогда
		     НомерСледующегоЭтапа = 0;
		КонецЕсли;

		этапИмя = элт["Этап"]  ;
		данныеЭтапа = элт["Данные"] ;
		подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(данныеЭтапа["Опер_наименование_подразделения"]);
		Если подразделение  = Неопределено Тогда
			результат["ЕстьОшибки"] = Истина;
			результат["Ошибки"].Добавить("Не найдено подразделение " + данныеЭтапа["Опер_наименование_подразделения"] + " в СтруктураПредприятия") ;
			Возврат результат;
		КонецЕсли;

		соотв_Трудозатраты = данныеЭтапа["Трудозатраты"];
		соотв_Материалы = данныеЭтапа["Материалы"];

		Этап = Справочники.ЭтапыПроизводства.НайтиПоНаименованию(этапИмя,,,СпРО.Ссылка);
		Если Этап = Неопределено или Этап.Пустая() Тогда
			ЭтапО = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
			ЭтапО.Владелец = СпРО.Ссылка;
			ЭтапО.Наименование = этапИмя;
			ЭтапО.Подразделение = подразделение;
			ЭтапО.НомерЭтапа = НомерЭтапа;
			ЭтапО.НомерСледующегоЭтапа = НомерСледующегоЭтапа;
			ЭтапО.ЕдиницаИзмеренияПредварительногоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Минута;
			ЭтапО.ЕдиницаИзмеренияЗавершающегоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Минута;
			ЭтапО.ЕдиницаИзмеренияДлительностиЭтапа = Перечисления.ЕдиницыИзмеренияВремени.Минута;
			ЭтапО.Записать();
			Этап = ЭтапО.Ссылка;
		КонецЕсли;

		Для каждого киз Из соотв_Трудозатраты Цикл
		    уид_вид_работ = киз.Ключ;
			количество_работ  = киз.Значение;
			вид_работ = Справочники.ВидыРаботСотрудников.ПолучитьСсылку(Новый УникальныйИдентификатор(уид_вид_работ));

			СтрТрудозатраты = СпРО.Трудозатраты.Добавить();
			СтрТрудозатраты.ВидРабот = вид_работ;
			СтрТрудозатраты.Количество = количество_работ;
			СтрТрудозатраты.ЭтапРедактирование = Этап;
			СтрТрудозатраты.СтатьяКалькуляции = СтатьяКалькуляцииФОТ;


		КонецЦикла;
		Для каждого киз Из соотв_Материалы Цикл
		    код_мат = киз.Ключ;
			соотв_данные_мат  = киз.Значение;
			ТекНом = Справочники.Номенклатура.НайтиПоКоду(код_мат);
			Если ТекНом =  Неопределено Тогда
				результат["ЕстьОшибки"] = Истина;
				результат["Ошибки"].Добавить("Не найден код " + код_мат + " в Номенклатура") ;
			Возврат результат;
			КонецЕсли;
		    Способ_получения_материала_стр = соотв_данные_мат["Способы_получения_материала"];
		    Способ_получения_материала_мета = Метаданные.Перечисления.СпособыПолученияМатериаловВСпецификации.ЗначенияПеречисления.Найти(Способ_получения_материала_стр);
			Если Способ_получения_материала_мета =  Неопределено Тогда
				результат["ЕстьОшибки"] = Истина;
				результат["Ошибки"].Добавить("Не найден Перечисления " + Способ_получения_материала_стр + " в СпособыПолученияМатериаловВСпецификации") ;
			Возврат результат;
			КонецЕсли;
			Способ_получения_материала = Перечисления.СпособыПолученияМатериаловВСпецификации[Способ_получения_материала_стр];
			Статья_калькуляции_стр = соотв_данные_мат["Материалы_Статья_калькуляции"];
		    Статья_калькуляции = Справочники.СтатьиКалькуляции.НайтиПоНаименованию(Статья_калькуляции_стр);
			Если Статья_калькуляции =  Неопределено Тогда
				результат["ЕстьОшибки"] = Истина;
				результат["Ошибки"].Добавить("Не найден Статья_калькуляции " + Статья_калькуляции_стр + " в СтатьиКалькуляции") ;
			Возврат результат;
			КонецЕсли;

			Количество_мат = соотв_данные_мат["Мат_норма"];

			СтрМат = СпРО.МатериалыИУслуги.Добавить();
			СтрМат.Номенклатура = ТекНом;
			СтрМат.КоличествоУпаковок = Количество_мат;
			СтрМат.ЭтапРедактирование = Этап;
			СтрМат.СпособПолученияМатериала = Способ_получения_материала;
			СтрМат.СтатьяКалькуляции = Статья_калькуляции;

		КонецЦикла;
    НПП = НПП + 1;
	КонецЦикла;

	//ТблТрудозатрат = СпрРС.Трудозатраты.Выгрузить();
	//ТблТрудозатрат.Свернуть("ВидРабот, ЭтапРедактирование, СтатьяКалькуляции", "Количество");
	//СпрРС.Трудозатраты.Загрузить(ТблТрудозатрат);

	СпРО.ОсновноеИзделиеЭтап = Этап;
	СпРО.Статус = Перечисления.СтатусыСпецификаций.ВРазработке;
	СпРО.ОсновноеИзделиеХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	СпРО.Описание = Шапка["Описание"];
	Если Шапка["Сохранять"] = Истина Тогда
	    СпРО.Записать();
		результат["Код"]= СпРО.Код;
		БазоваяНавигационнаяСсылка = "e1c://server/"+ Шапка["КластерСерверов"] +"/" + Шапка["ИмяБазы"]  ;
		результат["Ссылка"]= ПолучитьВнешнююНавигационнуюСсылку(БазоваяНавигационнаяСсылка, ПолучитьНавигационнуюСсылку(СпРО));

	КонецЕсли;
	Возврат результат;

КонецФункции // СоздатьСпецификациюДоп()



&НаСервере
Функция СозданиеНоменклатуры(Данные)

	НачатьТранзакцию();

	Попытка
		результат = СоздатьНоменклатуру(Данные);

		Если результат["ЕстьОшибки"] = Ложь тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат результат;

	Исключение
		ОтменитьТранзакцию();
		Возврат "Непредвиденная ошибка создания ресурсной";
	КонецПопытки;

	Возврат Ложь;
КонецФункции //


&НаСервере
Функция СоздатьНоменклатуру(Данные)
	результат = Новый Структура;
	результат.Вставить("Код",Неопределено);
	результат.Вставить("ЕстьОшибки",Ложь);
	результат.Вставить("Ошибки",новый Массив);
	НаименованиеЗначение =Данные["Наименование"];
	Если НаименованиеЗначение = Неопределено Тогда
		результат["ЕстьОшибки"] = Истина;
		результат["Ошибки"].Добавить("Отустствует Реквизит Наименование") ;
		Возврат результат;
	КонецЕсли;


	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И НЕ Номенклатура.ЭтоГруппа";

	Запрос.УстановитьПараметр("Наименование", НаименованиеЗначение);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		результат["ЕстьОшибки"] = Истина;
		результат["Ошибки"].Добавить("Номенклатура с наименованием " + НаименованиеЗначение + " уже существет") ;
		Возврат результат;
	КонецЕсли;


	мета = Метаданные.Справочники.Номенклатура.Реквизиты;
	Номен = Справочники.Номенклатура.СоздатьЭлемент();
	Для каждого пара Из Данные Цикл
		Попытка
			Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты[пара.Ключ];
		Исключение
			Попытка
			    Реквизит = Метаданные.Справочники.Номенклатура.СтандартныеРеквизиты[пара.Ключ];
			Исключение
			    результат["ЕстьОшибки"] = Истина;
				результат["Ошибки"].Добавить("Для " + пара.Ключ + " не найден реквизит") ;
				Возврат результат;
			КонецПопытки;
		КонецПопытки;
		объект = Неопределено;
		Для Каждого Тип Из Реквизит.Тип.Типы() Цикл

			Если Тип = Тип("Строка") Или Тип = Тип("Число") Тогда
				объект = пара.Значение;
				Прервать;
			КонецЕсли;

			МетаданныеРеквизита = Метаданные.НайтиПоТипу(Тип);
			ИмяОбъекта = МетаданныеРеквизита.ПолноеИмя() ;
			МассивИмени = СтрРазделить(ИмяОбъекта,".");
			стр_типа_объекта = МассивИмени[0];
			стр_имени_объекта = МассивИмени[1];

			Если стр_типа_объекта = "Справочник" и объект = Неопределено Тогда
				объект = Справочники[стр_имени_объекта].НайтиПоНаименованию(пара.Значение,Истина);
				Прервать;
			КонецЕсли;
			Если стр_типа_объекта = "Перечисление" и объект = Неопределено Тогда
				Попытка
					объект = Перечисления[стр_имени_объекта][пара.Значение];
					Прервать;
				Исключение

				КонецПопытки

			КонецЕсли;

		КонецЦикла ;
		Если  объект = Неопределено Тогда
			результат["ЕстьОшибки"] = Истина;
			результат["Ошибки"].Добавить("Для " + пара.Ключ + " не найден обьект" + пара.Значение) ;
			Возврат результат;
		КонецЕсли;
		Номен[пара.Ключ] = объект;       //   Метаданные.НайтиПоТипу(Метаданные.Справочники.Номенклатура.Реквизиты.Найти("Артикул").Тип.Типы()[0]).ПолноеИмя()

	КонецЦикла;
	Номен.Записать();
	Номен.Прочитать();
	результат["Код"] = Номен.Код;
	Возврат результат;

КонецФункции //




Функция sysexchangePOST(Запрос)
	ИмяМетода = Запрос.ПараметрыURL.Получить("MyMethod");
	СтрокаОтвет = "";
		//БеляковАГ, Пауэрз, 01.04.2025
	//Постановщик: Тимошенко
	//Краткое описание цели: Интеграция по бесшовной работе с ресурсными МЕС-1С
	//Краткое описание правки: Доработка АПИ на создание номенклатуры
	//Журнал: https://bitrix24.kelast.ru/docs/pub/89a19d9b18995d279d8e7aa189cfb495/goToEdit/?&
	//+++++++++++++++++++++++++++++++++++++

	Если ИмяМетода = "make_nomen" Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Данные_строка = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8) ;
		Данные = MES_РаботаСДаннымиСервер.JSONВДанные(Данные_строка);

		результат = СозданиеНоменклатуры(Данные);
		Если результат["ЕстьОшибки"] = Истина Тогда
			Ответ.КодСостояния = 500;
		КонецЕсли;
		СтрокаОтвет = результат;
	КонецЕсли;
	//БеляковАГ, Пауэрз, 01.04.2025
	//-------------------------------------

	СтрокаJS = MES_РаботаСДаннымиСервер.ПолучитьСтрокуJSON(СтрокаОтвет);
	Ответ.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;

КонецФункции

Функция resspecPATCH(Запрос)

	//БеляковАГ, Пауэрз, 01.04.2025
	//Постановщик: Тимошенко
	//Краткое описание цели: Интеграция по бесшовной работе с ресурсными МЕС-1С
	//Краткое описание правки: Доработка АПИ на создание/чистку/удаление ресурсной спецификации
	//Журнал: https://bitrix24.kelast.ru/docs/pub/89a19d9b18995d279d8e7aa189cfb495/goToEdit/?&
	//+++++++++++++++++++++++++++++++++++++

	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL.Получить("MyMethod");
	СтрокаОтвет = "";
	Если ИмяМетода = "delete_res" Тогда
		Данные_строка = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8) ;
		Данные = MES_РаботаСДаннымиСервер.JSONВДанные(Данные_строка);

		результат = УдалениеРесурсной(Данные);
		Если результат["ЕстьОшибки"] = Истина Тогда
			Ответ.КодСостояния = 500;
		КонецЕсли;
		СтрокаОтвет = результат;
	ИначеЕсли ИмяМетода = "clear_res" Тогда
		Данные_строка = Запрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8) ;
		Данные = MES_РаботаСДаннымиСервер.JSONВДанные(Данные_строка);

		результат = ОчисткаРесурсной(Данные);
		Если результат["ЕстьОшибки"] = Истина Тогда
			Ответ.КодСостояния = 500;
		КонецЕсли;
		СтрокаОтвет = результат;

	КонецЕсли;
	//БеляковАГ, Пауэрз, 01.04.2025
	//-------------------------------------


	СтрокаJS = MES_РаботаСДаннымиСервер.ПолучитьСтрокуJSON(СтрокаОтвет);
	Ответ.УстановитьТелоИзСтроки(СтрокаJS, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
КонецФункции

&НаСервере
Функция УдалениеРесурсной(Данные)
	результат = Новый Структура;
	результат.Вставить("Код",Неопределено);
	результат.Вставить("ЕстьОшибки",Истина);
	Ошибка = новый Массив();
	Ошибка.Добавить("Непредвиденная ошибка удаления ресурсной");
	результат.Вставить("Ошибки",Ошибка);

	НачатьТранзакцию();
	Попытка
		результат = УдалитьСпецификацию(Данные);

		Если результат["ЕстьОшибки"] = Ложь тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;

	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

	Возврат результат;
КонецФункции //

&НаСервере
Функция ПроверитьДоступностьДействияПоСтатусу(КодРес)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РесурсныеСпецификации.Код КАК Код,
		|	РесурсныеСпецификации.Статус КАК Статус
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|ГДЕ
		|	РесурсныеСпецификации.Код = &КодРес
		|	И РесурсныеСпецификации.Статус = &Статус";

	Запрос.УстановитьПараметр("КодРес", КодРес);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСпецификаций.Действует);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат Ложь;
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
    Возврат Истина;


КонецФункции //



&НаСервере
Функция ОчисткаРесурсной(Данные)
	результат = Новый Структура;
	результат.Вставить("Код",Неопределено);
	результат.Вставить("ЕстьОшибки",Истина);
	Ошибка = новый Массив();
	Ошибка.Добавить("Непредвиденная ошибка очистки ресурсной");
	результат.Вставить("Ошибки",Ошибка);

	НачатьТранзакцию();
	Попытка
		результат = ОчиститьСпецификацию(Данные);

		Если результат["ЕстьОшибки"] = Ложь тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;

	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

	Возврат результат;
КонецФункции //


&НаСервере
Функция ОчиститьСпецификацию(Данные)

	ДанныеРес =  Данные["data"];

	результат = Новый Структура;
	результат.Вставить("Код",новый Массив);
	результат.Вставить("ЕстьОшибки",Ложь);
	результат.Вставить("Ошибки",новый Массив);

	Код = ДанныеРес["Код"];

	Доступно = ПроверитьДоступностьДействияПоСтатусу(Код);
	Если НЕ Доступно Тогда
		результат["ЕстьОшибки"] = Истина;
		результат["Ошибки"].Добавить("Нет доступа к спецификации со статусом ""действует""  " + Код + " в РесурсныеСпецификации") ;
		Возврат результат;
	КонецЕсли;


	СпрРС = Справочники.РесурсныеСпецификации.НайтиПоКоду(Код);
	Если СпрРС = Неопределено или СпрРС.Пустая() Тогда
		результат["ЕстьОшибки"] = Истина;
		результат["Ошибки"].Добавить("Не найдена спецификация  " + Код + " в РесурсныеСпецификации") ;
		Возврат результат;
	КонецЕсли;
	СпрО = СпрРС.ПолучитьОбъект();
	СпрО.Трудозатраты.Очистить();
	СпрО.МатериалыИУслуги.Очистить();
	СпрО.ВыходныеИзделия.Очистить();

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", СпрРС);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Этап = ВыборкаДетальныеЗаписи.Ссылка;
		ЭтапО = Этап.ПолучитьОбъект();
		ЭтапО.Удалить();
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

    СпрО.Записать();

	Возврат результат

КонецФункции // СоздатьСпецификациюДоп()


&НаСервере
Функция УдалитьСпецификацию(Данные)

	ДанныеРес =  Данные["data"];

	результат = Новый Структура;
	результат.Вставить("Код",новый Массив);
	результат.Вставить("ЕстьОшибки",Ложь);
	результат.Вставить("Ошибки",новый Массив);

	Наименование = ДанныеРес["Наименование"];

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|ГДЕ
		|	РесурсныеСпецификации.ПометкаУдаления = Ложь
		|	И РесурсныеСпецификации.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", Наименование);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		СпрРС =  ВыборкаДетальныеЗаписи.Ссылка;
		СпрО = СпрРС.ПолучитьОбъект();
		Код = СпрО.Код;
		результат["Код"].Добавить(Код);

		Доступно = ПроверитьДоступностьДействияПоСтатусу(Код);
		Если НЕ Доступно Тогда
			результат["ЕстьОшибки"] = Истина;
			результат["Ошибки"].Добавить("Нет доступа к спецификации со статусом ""действует""  " + Код + " в РесурсныеСпецификации") ;
			Возврат результат;
		КонецЕсли;

       	СпрО.Статус = Перечисления.СтатусыСпецификаций.Закрыта;
		СпрО.ПометкаУдаления = Истина;
		СпрО.Записать();

	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	Возврат результат

КонецФункции // СоздатьСпецификациюДоп()



