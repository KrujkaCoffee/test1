  &НаКлиенте
  Функция новыйДок()
	  Возврат не ЗначениеЗаполнено(Объект.Ссылка)
  КонецФункции // новыйДок()


  &НаКлиенте
  Процедура ВыбратьСтрокуИзВиртуальных()
	  // Вставить содержимое обработчика.
	  //Если ЭтаФорма.Элементы.MES_ТоварыДеталировка.ТекущиеДанные = Неопределено Тогда
	  //	  Возврат;
	  //КонецЕсли;
	  //Если НЕ ЭтаФорма.Элементы.MES_ТоварыДеталировка.ТекущиеДанные.ВиртуальныйЗаказПоставщику.Пустая() Тогда
	  //	  Сообщить("Строка уже заполнена");
	  //	  Возврат;
	  //КонецЕсли;
	  Если новыйДок() Тогда
		  Сообщить("Документ нужно сохранить перед заполнением деталировки");
		  Возврат;
	  КонецЕсли;
	  Если  ПроверитьВиртуальность() Тогда
		  Сообщить("Документ должен быть на виртуального поставщика");
		  Возврат;

	  КонецЕсли;
	  ПараметрыПодбора = Новый Структура;
	  ФормаВыбора = ОткрытьФорму("Документ.ЗаказПоставщику.Форма.MES_ФормаВыбораВиртуального",
	  ПараметрыПодбора, ЭтаФорма,,,,Новый ОписаниеОповещения("ВыборЗавершение", ЭтотОбъект),
	  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
  КонецПроцедуры




  &НаКлиенте
  Процедура MES_ВыбратьСтрокуИзВиртуальныхПосле(Команда)
	  // Вставить содержимое обработчика.
	  ВыбратьСтрокуИзВиртуальных();
  КонецПроцедуры

  &НаСервере
  Функция ПолучитьЗП(Номер,Дата)
	  ЗП = Документы.ЗаказПоставщику.НайтиПоНомеру(Номер, Дата);
	  Возврат ЗП;
  КонецФункции


  &НаСервере
  Функция НайтиПричинуВЗП()
	  имяПричины =    "Взято в работу";
	  примечание = "Причина для виртуальной строки ЗП";


	  причина = Справочники.ПричиныОтменыЗаказовПоставщикам.НайтиПоНаименованию(имяПричины);
	  Если причина.Пустая() Тогда
		  причина = Справочники.ПричиныОтменыЗаказовПоставщикам.СоздатьЭлемент();
		  причина.Наименование = имяПричины;
		  причина.Описание = примечание;
		  причина.ИнициаторОтменыЗаказовПоставщикам =  Перечисления.ИнициаторОтменыЗаказовПоставщикам.НашеПредприятие;
		  причина.Записать();
		  причина = причина.Ссылка;
	  КонецЕсли;
	  Возврат причина;


  КонецФункции // НайтиПричинуВЗП()


  &НаСервере
  Функция ПустаяПричинаСервер()
	  Возврат Справочники.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка();
  КонецФункции // ПустаяПричина()

  &НаСервере
  Функция СохранениеДок()
	  ДокОбъект = РеквизитФормыВЗначение("Объект");
	  ДокОбъект.Записать();
	  // Обновляем форму
	  ЗначениеВРеквизитФормы(ДокОбъект, "Объект");



  КонецФункции // СохранениеДок()


  &НаКлиенте
  Процедура ВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	  Если РезультатЗакрытия = Неопределено Тогда
		  Возврат;
	  КонецЕсли;
	  причина = НайтиПричинуВЗП();
	  ЭтотСсылка = ЭтаФорма.Объект.Ссылка;
	  Для каждого Строка Из РезультатЗакрытия Цикл
		  СтрокаТЧ = ЭтаФорма.Объект.MES_ТоварыДеталировка.Добавить();
		  ЗП = ПолучитьЗП(Строка.Номер, Строка.Дата);
		  успешно = УстановитьОтменуВиртуальнуюСтроку(ЗП,
		  Строка.ИдентификаторСтрокиВиртуальныйЗаказПоставщику,
		  ЭтотСсылка,
		  Истина,
		  причина);
		  Если НЕ успешно Тогда
			  Сообщить("Ошибка отметки вирутальной строки ЗП");
			  Возврат;
		  КонецЕсли;
		  ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
		  СтрокаТЧ.Отменено = Ложь;
		  СтрокаТЧ.ВиртуальныйЗаказПоставщику = ЗП;
		  СтрокаТЧ.ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	  КонецЦикла;

	  ЭтаФорма.Элементы.MES_ТоварыДеталировка.ЗакончитьРедактированиеСтроки(Истина);
	  СохранениеДок();
  КонецПроцедуры

  &НаКлиенте
  Процедура MES_MES_ТоварыДеталировкаВиртуальныйЗаказПоставщикуНачалоВыбораВместо(Элемент,
	  ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	  СтандартнаяОбработка = Ложь;
	  ВыбратьСтрокуИзВиртуальных();
  КонецПроцедуры


  &НаСервере
  Процедура MES_СвернутьВТоварыВместоНаСервере()
	  // Получаем объект документа
	  ДокОбъект = РеквизитФормыВЗначение("Объект");
	  // Получаем табличные части

	  ТабЧастьДеталировка = ДокОбъект.MES_ТоварыДеталировка;
	  ТабЧастьТовары = ДокОбъект.Товары;


	  ТЗ = ТабЧастьДеталировка.Выгрузить();

	  // Определяем группируемые и суммируемые колонки
	  СтрокаИменКолонок = "";
	  Для каждого Колонка из ТЗ.Колонки цикл
		  СтрокаИменКолонок = СтрокаИменКолонок + Колонка.Имя + ", ";
	  КонецЦикла;
	 МассивИменСуммируемыхКолонок = СтрРазделить("ВиртуальныйЗаказПоставщику, ЗабратьВКопию, КоличествоТовара, Упаковка, КоличествоУпаковок, ВидЦеныПоставщика, Цена, Сумма, ПроцентРучнойСкидки, СуммаРучнойСкидки, СуммаНДС, СуммаСНДС, КодСтроки, Отменено, СтатьяРасходов, Склад, Назначение, Подразделение, СписатьНаРасходы, ИдентификаторСтроки, ДатаОтгрузки, ИдентификаторСтрокиВиртуальныйЗаказПоставщику", ", ", ложь);
	 МассивИменГруппируемыхКолонок = СтрРазделить(СтрокаИменКолонок, ", ", ложь);
	  // Удаляем из массива группируемых колонок ненужные
	  Для каждого ЭлементМассива из МассивИменСуммируемыхКолонок цикл
		  МассивИменГруппируемыхКолонок.Удалить(МассивИменГруппируемыхКолонок.Найти(ЭлементМассива));
	  КонецЦикла;
	  МассивИменГруппируемыхКолонок.Удалить(0); // удаляем колонку "НомерСтроки", т. к. она является не группируемой, а служебной

	  Для Каждого Стр из ТЗ цикл
		  ЕдУпак =  Стр.Номенклатура.Расш1_УпаковкаДляДокументов;
		  Если НЕ Стр.Упаковка = ЕдУпак Тогда
			  Попытка
				  Коэфф = Стр.Номенклатура.КоэффициентЕдиницыДляОтчетов;
				  Стр.Упаковка = ЕдУпак;
				  Если Коэфф = 0 Тогда
					  Стр.КоличествоУпаковок = 0;
				  Иначе
					  Стр.КоличествоУпаковок = Окр(Стр.КоличествоТовара/ Коэфф,3);
				  КонецЕсли;

			  Исключение

			  КонецПопытки;

		  КонецЕсли;

	  КонецЦикла ;


	  ТЗ.Свернуть(СтрСоединить(МассивИменГруппируемыхКолонок, ", "), СтрСоединить(МассивИменСуммируемыхКолонок, ", "));

	  Для Каждого Стр из ТЗ цикл
		  Попытка
			  Стр.Упаковка = Стр.Номенклатура.Расш1_УпаковкаДляДокументов;
		  Исключение
		  КонецПопытки;
	  КонецЦикла ;

	  // Очищаем табличную часть Товары
	  ТабЧастьТовары.Очистить();
	  // Заполняем табличную часть Товары свернутыми данными
	  ТабЧастьТовары.Загрузить(ТЗ);
	  // Обновляем форму
	  ЗначениеВРеквизитФормы(ДокОбъект, "Объект");


  КонецПроцедуры

  &НаСервере
  Функция Получить20НДС()
	  Возврат Справочники.СтавкиНДС.НайтиПоНаименованию("20%");


  КонецФункции // Получить20НДС()


  &НаКлиенте
  Процедура MES_ОбработкаСтрок(МинимальнаяДата=Неопределено,СоотвЦены=Неопределено,СоотвНДС=Неопределено,СоотвДаты=Неопределено )
	    Если СоотвЦены=Неопределено ТОгда
	   		СоотвЦены = новый Соответствие;
		КонецЕсли;
	    Если СоотвНДС=Неопределено ТОгда
	   		СоотвНДС = Новый Соответствие;
		КонецЕсли;
	  	Если СоотвДаты=Неопределено ТОгда
	   		СоотвДаты = Новый Соответствие;
		КонецЕсли;

	  НДС20 = Получить20НДС();


	  Для каждого товар Из ЭтаФорма.Объект.Товары Цикл
		  ТекущаяСтрока = товар;

		  ОбработкаСтрокиНоменклатуры(ТекущаяСтрока);

		  ОбработкаСтрокиКоличества(ТекущаяСтрока);


		  Цена = СоотвЦены.Получить(товар.Номенклатура);
		  Если Цена = Неопределено Тогда
			  Цена = 0.01;
		  КонецЕсли;
		  товар.Цена = Цена;

		  НДС = СоотвНДС.Получить(товар.Номенклатура);
		  Если НДС = Неопределено Тогда
			  НДС = НДС20;
		  КонецЕсли;
		  товар.СтавкаНДС = НДС;

		   ДатаОтгрузки = СоотвДаты.Получить(товар.Номенклатура);
		  Если ДатаОтгрузки = Неопределено Тогда
			  ДатаОтгрузки = Дата(1,1,1,0,0,0);
		  КонецЕсли;
		  товар.ДатаОтгрузки = ДатаОтгрузки;


		  ОбработкаСтрокиНДС(ТекущаяСтрока);

		  ОбработкаСтрокиЦена(ТекущаяСтрока);
		  //Если НЕ МинимальнаяДата = Неопределено Тогда       //Попросили убрать 16.05.2025

		//	  товар.ДатаОтгрузки =  МинимальнаяДата;

		  //КонецЕсли;
		  товар.Подразделение = Объект.Подразделение;


	  КонецЦикла;
	  РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

  КонецПроцедуры

  &НаКлиенте
  Процедура MES_СвернутьВТоварыВместо1(Команда)
      	  СоотвЦены = новый Соответствие;
	  СоотвНДС = Новый Соответствие;
	  СоотвДаты = Новый Соответствие;
	  МинимальнаяДата = Неопределено;

	  Пустая = Истина;
	  Для каждого товар Из ЭтаФорма.Объект.MES_ТоварыДеталировка Цикл
		  Пустая = Ложь;
		  Если товар.Номенклатура.Пустая() Тогда
			  Сообщить("Имеются не заполненные строки");
			  Возврат;
		  КонецЕсли;
		  Если МинимальнаяДата = Неопределено или МинимальнаяДата > товар.ДатаОтгрузки  Тогда
			  МинимальнаяДата = товар.ДатаОтгрузки;
		  КонецЕсли;
	  КонецЦикла;
	  Если Пустая Тогда
		  Возврат;
	  КонецЕсли;


	  Для каждого товар Из ЭтаФорма.Объект.Товары Цикл
		  СоотвЦены.Вставить(товар.Номенклатура,товар.Цена);
		  СоотвНДС.Вставить(товар.Номенклатура,товар.СтавкаНДС);
		  СоотвДаты.Вставить(товар.Номенклатура,товар.ДатаОтгрузки);
	  КонецЦикла;


	  MES_СвернутьВТоварыВместоНаСервере();
	  ЭтаФорма.Объект.ЖелаемаяДатаПоступления =  МинимальнаяДата;
	  //ЭтаФорма.Объект.ПоступлениеОднойДатой  =  Истина;    //попросили убрать 16.05.2025
	  MES_ОбработкаСтрок(МинимальнаяДата,СоотвЦены,СоотвНДС,СоотвДаты);


	  ПереходНаСтраницу = ЭтаФорма.Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Найти("ГруппаТовары");
	  ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ПереходНаСтраницу;
  КонецПроцедуры



  &НаСервере
  Процедура MES_СвернутьИПересчитатьВУпаковкиПослеСервер()

	  // Вставить содержимое обработчика.
	  // Получаем объект документа
	  ДокОбъект = РеквизитФормыВЗначение("Объект");
	  // Получаем табличные части

	  ТабЧастьДеталировка = ДокОбъект.Товары;
	  ТабЧастьТовары = ДокОбъект.Товары;
	  Для каждого строка Из ТабЧастьТовары Цикл
		  ЕдУпак = строка.Номенклатура.Расш1_УпаковкаДляДокументов;
		  Если ЕдУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
			  ЕдУпак = строка.Номенклатура.ЕдиницаДляОтчетов;
		  КонецЕсли;
		  Если ЕдУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
			  Сообщить("Для строки N " + строка.НомерСтроки + " - " + строка.Номенклатура.Наименование + " не удается определить ЕдУпак, проверьте номенклатуру.");
			  Возврат;
		  КонецЕсли;
		  Если строка.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда


			  Если строка.Номенклатура.КоэффициентЕдиницыДляОтчетов > 0 Тогда
				  строка.Упаковка = ЕдУпак;
				  строка.КоличествоУпаковок = Окр(строка.Количество/строка.Номенклатура.КоэффициентЕдиницыДляОтчетов,3) ;
			  КонецЕсли;
		  КонецЕсли;

	  КонецЦикла;


	  ТЗ = ТабЧастьДеталировка.Выгрузить();

	  // Определяем группируемые и суммируемые колонки
	  СтрокаИменКолонок = "";
	  Для каждого Колонка из ТЗ.Колонки цикл
		  СтрокаИменКолонок = СтрокаИменКолонок + Колонка.Имя + ", ";
	  КонецЦикла;
	  МассивИменСуммируемыхКолонок = СтрРазделить("Цена, Характеристика, Упаковка, СуммаСНДС, СуммаРучнойСкидки, СуммаНДС, Сумма, СтатьяРасходов, СтавкаНДС, СписатьНаРасходы, Расш1_ЦенаФакт, Расш1_УпаковкаФакт, Расш1_Ссылка2, Расш1_Ссылка1, Расш1_КоличествоФакт, ПроцентРучнойСкидки, ПричинаОтмены, Отменено, НоменклатураПартнера, Назначение, КоличествоУпаковок, Количество, КодСтроки, ИдентификаторСтроки, ДатаПоступления, ВидЦеныПоставщика, АналитикаРасходов, MES_ЗППотребитель", ", ", ложь);
	  МассивИменГруппируемыхКолонок = СтрРазделить(СтрокаИменКолонок, ", ", ложь);
	  МассивИменСлужебныхКолонок = СтрРазделить("НомерСтроки, Склад, Подразделение, ДатаОтгрузки", ", ", ложь);
	  // Удаляем из массива группируемых колонок ненужные
	  Для каждого ЭлементМассива из МассивИменСуммируемыхКолонок цикл
		  номер =       МассивИменГруппируемыхКолонок.Найти(ЭлементМассива);
		  Если НЕ номер = Неопределено Тогда
			  МассивИменГруппируемыхКолонок.Удалить(МассивИменГруппируемыхКолонок.Найти(ЭлементМассива));
		  КонецЕсли;
	  КонецЦикла;
	  Для каждого ЭлементМассива из МассивИменСлужебныхКолонок цикл
		  номер =  МассивИменГруппируемыхКолонок.Найти(ЭлементМассива)  ;
		  Если НЕ номер = Неопределено Тогда
			  МассивИменГруппируемыхКолонок.Удалить(номер); // удаляем колонку "НомерСтроки", т. к. она является не группируемой, а служебной
		  КонецЕсли;
	  КонецЦикла;
	  ТЗ.Свернуть(СтрСоединить(МассивИменГруппируемыхКолонок, ", "), СтрСоединить(МассивИменСуммируемыхКолонок, ", "));

	  // Очищаем табличную часть Товары
	  ТабЧастьТовары.Очистить();
	  // Заполняем табличную часть Товары свернутыми данными

	  ТабЧастьТовары.Загрузить(ТЗ);

	  НДС20 = Получить20НДС();

	  Для каждого строка Из ТабЧастьТовары Цикл
		  строка.КодСтроки = Объект["Товары"][строка.НомерСтроки - 1].ПолучитьИдентификатор();

		  Если НЕ СтрДлина(строка.ИдентификаторСтроки) = 36 Тогда
			  строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		  КонецЕсли;
		  строка.Расш1_Ссылка2 = "";
		  строка.Расш1_Ссылка1 = "";
		  Если строка.Цена = Неопределено или строка.Цена = 0 Тогда
			  строка.Цена = 1;
		  КонецЕсли;
		  Если строка.СтавкаНДС = Неопределено или строка.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка() Тогда
			 строка.СтавкаНДС = НДС20;
		  КонецЕсли;
		  Если строка.ДатаОтгрузки = Неопределено Тогда
			  строка.ДатаОтгрузки = Дата(1,1,1,0,0,0);
		  КонецЕсли;
          строка.Подразделение = Объект.Подразделение;

	  КонецЦикла;


	  // Обновляем форму
	  ЗначениеВРеквизитФормы(ДокОбъект, "Объект");



  КонецПроцедуры


  &НаКлиенте
  Процедура MES_СвернутьИПересчитатьВУпаковкиПосле(Команда)
	  //MES_ОбработкаСтрок();
	  MES_СвернутьИПересчитатьВУпаковкиПослеСервер();
	  Для каждого товар Из ЭтаФорма.Объект.Товары Цикл
		  ТекущаяСтрока = товар;

		  //ОбработкаСтрокиНоменклатуры(ТекущаяСтрока);

		  ОбработкаСтрокиКоличества(ТекущаяСтрока);

		  ОбработкаСтрокиНДС(ТекущаяСтрока);

		  ОбработкаСтрокиЦена(ТекущаяСтрока);
	  КонецЦикла;

	  //РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	  ЭтаФорма.Модифицированность = Истина;
  КонецПроцедуры





  &НаСервере
  Функция ПроверитьВиртуальность(Значение=Неопределено)
	  Если Значение = Неопределено Тогда
		  Если Объект.Партнер.Пустая() Тогда
			  Возврат Неопределено;
		  КонецЕсли;
		  Значение = Объект.Партнер.Наименование;
	  КонецЕсли;
	  строкаРегВыр = ".*" + Константы.ВиртуальныйПартнерДляЗППДО.Получить() + ".*"  ;
	  Если СтрПодобнаПоРегулярномуВыражению(Значение, строкаРегВыр)   Тогда
		  Возврат Истина;
	  КонецЕсли;
	  Возврат ЛОЖЬ;
  КонецФункции // ПроверитьВиртуальность()



  &НаКлиенте
  Процедура ОбработкаВидимостиДеталировка(Значение=Неопределено)
	  // Вставить содержимое обработчика.
	  виртуальность =  ПроверитьВиртуальность(Значение);
	  Если виртуальность = Неопределено Тогда
		  ЭтаФорма.Элементы.ГруппаТоварыДеталировка.Видимость = Ложь;
		  ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыMES_ЗППотребитель.Видимость = Ложь;
		  Возврат;
	  КонецЕсли;
	  ЭтаФорма.Элементы.ГруппаТоварыДеталировка.Видимость = Не виртуальность;
	  ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыMES_ЗППотребитель.Видимость = виртуальность ;
  КонецПроцедуры



  &НаСервере
  Функция ВсеСтрокаТЧЗабраны(ТЧ)
	  Для каждого строка Из ТЧ Цикл
		  Если строка.Отменено = Ложь Тогда
			  Возврат Ложь;
		  КонецЕсли;
	  КонецЦикла;
	  Возврат Истина;
  КонецФункции // ВсеСтрокаТЧЗабраны()


  &НаСервере
  Функция УстановитьОтменуВиртуальнуюСтроку(ссылка, ИдентификаторСтроки,ЗППотребитель, Отмена = Ложь, Причина = Неопределено )

	  Если Отмена = Истина Тогда
		  Если Причина = Неопределено Тогда
			  Возврат Ложь;
		  КонецЕсли;
	  Иначе
		  Если Причина = Неопределено Тогда
			  Причина = ПустаяПричинаСервер();
		  КонецЕсли;
		  ЗППотребитель = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка();
	  КонецЕсли;

	  об_ВЗП = ссылка.ПолучитьОбъект();
	  ТЧ = об_ВЗП.Товары;

	  номерСтроки =  Неопределено;
	  Для каждого строка Из ТЧ Цикл
		  Если строка.ИдентификаторСтроки = ИдентификаторСтроки Тогда
			  номерСтроки = строка.НомерСтроки;
			  Прервать;
		  КонецЕсли;
	  КонецЦикла;

	  Если номерСтроки =  Неопределено Тогда
		  Возврат Ложь;
	  КонецЕсли;


	  ТЧ[номерСтроки-1].Отменено = Отмена;
	  ТЧ[номерСтроки-1].ПричинаОтмены  = Причина;
	  ТЧ[номерСтроки-1].MES_ЗППотребитель  = ЗППотребитель;

	  Если ВсеСтрокаТЧЗабраны(ТЧ) Тогда
		  об_ВЗП.ПометкаУдаления = Истина;
		  //об_ВЗП.Записать();
		  об_ВЗП.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	  Иначе
		  об_ВЗП.ПометкаУдаления = Ложь;
		  об_ВЗП.Записать(РежимЗаписиДокумента.Проведение);
	  КонецЕсли;



	  Возврат Истина;
  КонецФункции // ОтметитьНаОтменуВиртуальнуюСтроку()

  &НаКлиенте
  Процедура MES_ПартнерПриИзмененииПосле(Элемент)
	  // Вставить содержимое обработчика.
	  ОбработкаВидимостиДеталировка();
	  ОбновитьОтображениеДанных();
  КонецПроцедуры


  &НаКлиенте
  Процедура MES_ПриОткрытииПосле(Отказ)
	  // Вставить содержимое обработчика.
	  ОбработкаВидимостиДеталировка();
  КонецПроцедуры

  &НаКлиенте
  Процедура MES_MES_ТоварыДеталировкаПередУдалениемПосле(Элемент, Отказ)
	  // Вставить содержимое обработчика.
	  // Вставить содержимое обработчика.
	  Если СтрДлина(Элемент.ТекущиеДанные.ИдентификаторСтрокиВиртуальныйЗаказПоставщику) <> 36 Тогда
		  Возврат;
	  КонецЕсли;
	  Если Элемент.ТекущиеДанные.ВиртуальныйЗаказПоставщику.Пустая() Тогда
		  Возврат;
	  КонецЕсли;
	  ЭтотСсылка = ЭтаФорма.Объект.Ссылка;
	  успешно = УстановитьОтменуВиртуальнуюСтроку(Элемент.ТекущиеДанные.ВиртуальныйЗаказПоставщику,
	  Элемент.ТекущиеДанные.ИдентификаторСтрокиВиртуальныйЗаказПоставщику,ЭтотСсылка, Ложь);
	  Если НЕ успешно Тогда
		  Сообщить("Ошибка отметки вирутальной строки ЗП");
		  Отказ = Истина
	  КонецЕсли;

  КонецПроцедуры

  &НаКлиенте
  Процедура MES_MES_ТоварыДеталировкаПослеУдаленияПосле(Элемент)
	  // Вставить содержимое обработчика.
	  СохранениеДок();
  КонецПроцедуры

  &НаКлиенте
  Процедура MES_MES_ТоварыДеталировкаЗабратьВКопиюПриИзмененииПосле(Элемент)
	  // Вставить содержимое обработчика.
  КонецПроцедуры

  &НаКлиенте
  Процедура ОбработкаСтрокиНДС(ТекущаяСтрока)
	  СтруктураПересчетаСуммы = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);

	  СтруктураДействий = Новый Структура;
	  СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	  СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	  СтруктураДействий.Вставить("ПересчитатьСумму");
	  СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	  СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	  ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	  УказаннаяСтавкаНДС = ТекущаяСтрока.СтавкаНДС;


  КонецПроцедуры // ОбработкаСтрокиКоличества()


  &НаКлиенте
  Процедура ОбработкаСтрокиЦена(ТекущаяСтрока)
	  СтруктураПересчетаСуммы = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);

	  СтруктураДействий = Новый Структура;
	  СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	  СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	  СтруктураДействий.Вставить("ПересчитатьСумму");
	  СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	  СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	  ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);



  КонецПроцедуры // ОбработкаСтрокиКоличества()



  &НаКлиенте
  Процедура ОбработкаСтрокиКоличества(ТекущаяСтрока)
	  СтруктураДействий = Новый Структура;
	  ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);

	  ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
  КонецПроцедуры // ОбработкаСтрокиКоличества()

  &НаКлиенте
  Процедура ОбработкаСтрокиНоменклатуры(ТекущаяСтрока)
	  СтруктураПересчетаСуммы = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);

	  СтруктураДействий = Новый Структура;
	  СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	  СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	  СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	  СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	  СтруктураДействий.Вставить(
	  "ПроверитьЗаполнитьСклад",
	  ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(
	  Объект,
	  СкладГруппа));
	  СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	  Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		  СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	  Иначе
		  СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	  КонецЕсли;

	  ПараметрыЗаполненияСтавкиНДС = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
	  ПараметрыЗаполненияСтавкиНДС.УказаннаяСтавкаНДС = УказаннаяСтавкаНДС;
	  СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
	  СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	  СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	  СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	  СтруктураДействий.Вставить("ПересчитатьСумму");
	  СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	  СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	  СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	  СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	  СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	  СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатуры",
	  Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));

	  //
	  Если КонтролироватьАссортимент Тогда
		  СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		  СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		  СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		  СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления), Объект.ЖелаемаяДатаПоступления, Объект.Дата);
		  СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина. Заказывать его не рекомендуется.';
		  |en = 'Item ""%1"" is not in this selling point''s product range. Please reconsider adding it to the order.'");
		  СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныЗакупки";
		  СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		  СтруктураПроверкиАссортимента.РазрешатьДобавление = Истина;
		  //
		  СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	  КонецЕсли;
	  НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	  СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
	  ЭтаФорма.ИмяФормы, "Товары"));

	  ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(СтруктураДействий, ЭтотОбъект);

	  УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(СтруктураДействий);

	  ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	  Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
		  ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
		  ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
		  Или ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда

		  ТекущаяСтрока.СписатьНаРасходы = Ложь;
		  ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");

	  ИначеЕсли ИспользоватьУчетПрочихДоходовРасходов
		  И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		  ТекущаяСтрока.СписатьНаРасходы = Истина;
	  КонецЕсли;

	  ДоходыИРасходыКлиентСервер.ПриИзмененииРеквизитаДоступностиСтатьиВСтроке(ЭтотОбъект, ТекущаяСтрока, "Объект.Товары");

  КонецПроцедуры // ОбработкаСтрокиНоменклатуры()


  &НаСервереБезКонтекста
  Функция  MES_MES_ТоварыДеталировкаПриАктивизацииСтрокиПослеНаСервере(ссылкаВиртЗП)
	  // Вставить содержимое обработчика.
	  //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	  // Данный фрагмент построен конструктором.
	  // При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	  Запрос = Новый Запрос;
	  Запрос.Текст =
	  "ВЫБРАТЬ
	  |	ЗаказПоставщику.ДополнительнаяИнформация КАК ДополнительнаяИнформация
	  |ИЗ
	  |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	  |ГДЕ
	  |	ЗаказПоставщику.Ссылка = &ссылкаВиртЗП";

	  Запрос.УстановитьПараметр("ссылкаВиртЗП", ссылкаВиртЗП);

	  РезультатЗапроса = Запрос.Выполнить();

	  ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	  Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		  // Вставить обработку выборки ВыборкаДетальныеЗаписи
		  Возврат ВыборкаДетальныеЗаписи.ДополнительнаяИнформация;
	  КонецЦикла;

	  //}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

  КонецФункции


  &НаКлиенте
  Процедура MES_MES_ТоварыДеталировкаПриАктивизацииСтрокиПосле(Элемент)
	  Если Элемент.ТекущиеДанные = Неопределено Тогда
		  Возврат;
	  КонецЕсли;
	  ссылкаВиртЗП = Элемент.ТекущиеДанные.ВиртуальныйЗаказПоставщику;
	  текст = MES_MES_ТоварыДеталировкаПриАктивизацииСтрокиПослеНаСервере(ссылкаВиртЗП);
	  ЭтаФорма.ДопИнфоИзЗППДО = текст;
  КонецПроцедуры

&НаСервере
  Процедура MES_ВыбратьСтрокиИзЭтаповПослеНаСервере()
	  // Вставить содержимое обработчика.
  КонецПроцедуры

&НаКлиенте
Процедура MES_ВыбратьСтрокиИзЭтаповПосле(Команда)
	  ПараметрыПодбора = Новый Структура;
	  ФормаВыбора = ОткрытьФорму("Документ.ЗаказПоставщику.Форма.MES_ФормаВыбораМатериалаИзЭтапов",
	  ПараметрыПодбора, ЭтаФорма,,,,Новый ОписаниеОповещения("ВыборМатериалаИзЭтаповЗавершение", ЭтотОбъект),
	  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	  MES_ВыбратьСтрокиИзЭтаповПослеНаСервере();



  КонецПроцедуры




&НаКлиенте
Процедура ВыборМатериалаИзЭтаповЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    Если РезультатЗакрытия = Неопределено Тогда
		  Возврат;
	  КонецЕсли;

КонецПроцедуры // ВыборМатериалаИзЭтаповЗавершение()

&НаКлиенте
Процедура MES_СоздатьКопиюДокументаПосле(Команда)

   СсылкаНаДокумент = MES_СоздатьКопиюДокументаПослеСервер()	 ;

   //ЭтаФорма.ОбновитьОтображениеДанных();
      ПараметрыФормы = Новый Структура("Ключ", СсылкаНаДокумент);
	ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаДокумента", ПараметрыФормы);
   КонецПроцедуры

&НаСервере
Функция  MES_СоздатьКопиюДокументаПослеСервер()

    ДокОбъект = РеквизитФормыВЗначение("Объект");
	НовыйОбъект = ДокОбъект.Скопировать();
	ЭтаФорма.Прочитать();
	ссылка = Документы.ЗаказПоставщику.НайтиПоНомеру(НовыйОбъект.Номер,НовыйОбъект.Дата);
	Возврат ссылка;

КонецФункции


&НаКлиенте
Процедура MES_ТоварыВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.

	//БеляковАГ, Пауэрз, 24.07.2025
	//Постановщик: Моренко
	//Краткое описание цели: открывать документ потребителя
	//Краткое описание правки: обработка события дабл клик
	//Журнал: https://bitrix24.kelast.ru/docs/pub/89a19d9b18995d279d8e7aa189cfb495/goToEdit/?&
	//+++++++++++++++++++++++++++++++++++++

	Если Поле.Имя="ТоварыMES_ЗППотребитель" Тогда
    	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	    ИмяКолонки = СтрЗаменить(ИмяКолонки, Элемент.Имя, "");
	    ЗначениеАктивнойЯчейки = Элементы.Товары.ТекущиеДанные[ИмяКолонки];
		ПараметрыФормы = Новый Структура("Ключ", ЗначениеАктивнойЯчейки);
		ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
	//БеляковАГ, Пауэрз, 24.07.2025
	//-------------------------------------

КонецПроцедуры
