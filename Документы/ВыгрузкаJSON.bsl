//asdavydov ++
&НаКлиенте
Перем ПодтвержденоЗакрытиеФормы;
&НаКлиенте
Перем НеСоздаватьЛог;
//++ asdavydov

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//asdavydov ++
	ПодтвержденоЗакрытиеФормы = 	Ложь;
	ЭтотОбъект.СоздатьЛог = 		Истина;
	НеСоздаватьЛог = 				Ложь;
	//++ asdavydov
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНаСервере()
    Схема = Элементы.ТблНоменклатуры.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.ТблНоменклатуры.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	МассивНом = Новый Массив;
	СтруктураНом = Новый Структура;
	СтруктураНом.Вставить("Пномер");
	СтруктураНом.Вставить("Вид");
	СтруктураНом.Вставить("Код");
	СтруктураНом.Вставить("Артикул");
	СтруктураНом.Вставить("Наименование");
	СтруктураНом.Вставить("ЕдиницаИзм");
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
	//ИмяВременногоФайла = "D:\Платан\!\temp.json";
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	//Вариант 2 - запись в файл
	//Значение = БезопасныйРежим();
	//Если ТипЗнч(Значение)=тип("Булево") и Значение=Истина тогда
	//УстановитьОтключениеБезопасногоРежима(Истина);
	//	ЗаписьJSON.ОткрытьФайл(ИмяВременногоФайла, , , ПараметрыJSON);
	//КОнецЕсли;
	//	УстановитьБезопасныйРежим(Ложь);
	//Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(Истина, Истина);
	//ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	ЗаписьJSON.ОткрытьФайл(ИмяВременногоФайла, , , ПараметрыJSON);
	//СериализуемоеЗначение = СпрРС1.ПолучитьОбъект();
	НПП=1;
	Для каждого Строка из ТаблицаРезультат Цикл
		Попытка
		СтруктураНом = Новый Структура;
		СтруктураНом.Вставить("ПНомер", НПП);
		СтруктураНом.Вставить("Вид", Строка.ВидНоменклатуры.Наименование);
		СтруктураНом.Вставить("Код", Строка.Код);
		СтруктураНом.Вставить("Артикул", Строка.Артикул);
		СтруктураНом.Вставить("Наименование", Строка.Наименование);
		СтруктураНом.Вставить("ЕдиницаИзм", Строка.ЕдиницаИзмерения.Наименование);
		НПП = НПП+1;
		//ЗаписьJSON.УстановитьСтроку();
		//ЗаписатьJSON(ЗаписьJSON, СтруктураНом);
		МассивНом.Добавить(СтруктураНом);
		Исключение

		КонецПопытки
	КонецЦикла;
	//СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, МассивНом);//, НазначениеТипаXML.Явное
	ЗаписатьJSON(ЗаписьJSON, МассивНом);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	//Сообщить(СтрокаJSON);
	Двоичное=Новый ДвоичныеДанные(ИмяВременногоФайла);  // получаем двоичные данные из файла
    Адрес = ПоместитьВоВременноеХранилище(Двоичное, ЭтаФорма.УникальныйИдентификатор); // кидаем двоичные данные во врем. хранилище
    Возврат Адрес;
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
    ДиалогВыбораФайла=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);  // выбор каталога
    ДиалогВыбораФайла.Заголовок = "Выберите каталог!";
    Если ДиалогВыбораФайла.Выбрать() Тогда
        Путь = ДиалогВыбораФайла.Каталог + "\Nomenklatura.json";    // присваиваем переменной путь выбранного каталога + имя будущего файла

        Адрес = ВыгрузитьНаСервере();

        Двоичное=ПолучитьИзВременногоХранилища(Адрес);  // по адресу временного хранилища получаем двоичные данные
        Двоичное.Записать(Путь); // перезаписываем наш файлик на клиенте
		УдалитьИзВременногоХранилища(Адрес);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НайтиРС(Строка, ВерхнУровень)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.РесурсныеСпецификации КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Наименование ПОДОБНО &Наименование
	                      |	И НЕ Номенклатура.ПометкаУдаления
	                      |	И Номенклатура.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	                      |			");
	Если Строка.Способы_получения_материала="Обеспечивать" Тогда
		Возврат Неопределено;
	Иначе
		СтрПоиска = Строка.Номенклатурный_Номер + " " + Строка.Наименование;
	КонецЕсли;
	Запрос.УстановитьПараметр("Наименование", "%"+СтрПоиска+"%");
	//Запрос.УстановитьПараметр("ВерхнУровень", ВерхнУровень);
	Выборка = Запрос.Выполнить().Выбрать();
	ТекНом = Неопределено;
	Если выборка.Следующий() Тогда
		ТекНом = Выборка.Ссылка;
	КонецЕсли;
	Возврат ТекНом;
КонецФункции

&НаСервере
Функция НайтиРСпоНом(ВыбНом, ВерхнУровень)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.РесурсныеСпецификации КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.ОсновноеИзделиеНоменклатура = &ОсновноеИзделиеНоменклатура
	                      |	И НЕ Номенклатура.ПометкаУдаления
	                      |	И Номенклатура.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	                      |			");
	Запрос.УстановитьПараметр("ОсновноеИзделиеНоменклатура", ВыбНом);
	//Запрос.УстановитьПараметр("ВерхнУровень", ВерхнУровень);
	Выборка = Запрос.Выполнить().Выбрать();
	ТекНом = Справочники.РесурсныеСпецификации.ПустаяСсылка();
	Если выборка.Следующий() Тогда
		ТекНом = Выборка.Ссылка;
	КонецЕсли;
	Возврат ТекНом;
КонецФункции

//asdavydov ++
&НаСервере
Функция НайтиПоКодуERP(Строка)
	ТекНом = Справочники.Номенклатура.ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(Строка.Код_ERP) Тогда
		Возврат ТекНом;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Код = &Код
	                      |	И НЕ Номенклатура.ПометкаУдаления");
	Запрос.УстановитьПараметр("Код", Строка.Код_ERP);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекНом = Выборка.Ссылка;
	КонецЕсли;
	Возврат ТекНом;
КонецФункции
//++ asdavydov

&НаСервере
Функция НайтиНоменклатуру(Строка)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Наименование ПОДОБНО &Наименование
	                      |	И НЕ Номенклатура.ПометкаУдаления");
	Если Строка.Способы_получения_материала="Обеспечивать" Тогда
		СтрПоиска = Строка.Наименование;
	Иначе
		СтрПоиска = Строка.Номенклатурный_Номер + " " + Строка.Наименование;
	КонецЕсли;
	Запрос.УстановитьПараметр("Наименование", "%"+СтрПоиска+"%");
	Выборка = Запрос.Выполнить().Выбрать();
	ТекНом = Справочники.Номенклатура.ПустаяСсылка();
	Если выборка.Следующий() Тогда
		ТекНом = Выборка.Ссылка;
	КонецЕсли;
	Возврат ТекНом;
КонецФункции

&НаСервере
Функция НайтиМатериал(Строка)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Наименование ПОДОБНО &Наименование
	                      |	И НЕ Номенклатура.ПометкаУдаления");
	Если Строка.Способы_получения_материала="Обеспечивать" Тогда
		СтрПоиска = СтрЗаменить(Строка.Мат_наименование, "  ", "%");
		//СтрПоиска = Строка.Мат_наименование;
	Иначе
		СтрПоиска = Строка.Мат_код + " " + Строка.Мат_наименование;
	КонецЕсли;
	Запрос.УстановитьПараметр("Наименование", "%"+СтрПоиска+"%");
	Выборка = Запрос.Выполнить().Выбрать();
	ТекНом = Справочники.Номенклатура.ПустаяСсылка();
	Если выборка.Следующий() Тогда
		ТекНом = Выборка.Ссылка;
	КонецЕсли;
	Возврат ТекНом;
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеВидовРабот()
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ТекОбъект.ПолучитьСоотвВР();
КонецФункции

&НаСервере
Функция ПолучитьКодРодителя(Код)
	Если код="" Тогда
		Возврат "";
	КонецЕсли;
	Рез = Код;
	Прибавка = "";
	Пока Прав(Рез, 2)=".0" Цикл
		Рез = Лев(Рез, СтрДлина(Рез)-2);
		Прибавка = Прибавка + ".0";
	КонецЦикла;
	Симв = Прав(Рез, 1);
	Рез = Лев(Рез, СтрДлина(Рез)-1);
	Пока Симв<>"." и Симв<>"" Цикл
		Симв = Прав(Рез, 1);
		Рез = Лев(Рез, СтрДлина(Рез)-1);
	КонецЦикла;
	Рез = Рез+".0"+Прибавка;
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция НайтиУровеньПоКоду(Код, УрПоиска)
	Рез = Неопределено;
	Уровень = УрПоиска.ПолучитьЭлементы();
	Для Каждого Строка Из Уровень Цикл
		Если Строка.dreva_kod = Код Тогда
			Возврат Строка;
		КонецЕсли;
		Рез = НайтиУровеньПоКоду(Код, Строка);
		Если Рез<>Неопределено Тогда
			Возврат Рез;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция НайтиУровеньПоОснЭтапу(Код, УрПоиска)
	Рез = Неопределено;
	Уровень = УрПоиска.ПолучитьЭлементы();
	Для Каждого Строка Из Уровень Цикл
		Если Строка.ОснЭтап = Код Тогда
			Возврат Строка;
		КонецЕсли;
		Рез = НайтиУровеньПоОснЭтапу(Код, Строка);
		Если Рез<>Неопределено Тогда
			Возврат Рез;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура Загрузить(Команда)
	тзМат.Очистить();
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл для чтения из него данных в 1с!";
	Если Диалог.Выбрать() Тогда
		Путь = Диалог.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
	МассивФайлов = Диалог.ВыбранныеФайлы;
	Для Каждого ЭлементФайл Из МассивФайлов Цикл
		Файл = Новый Файл(ЭлементФайл);
		Объект.ИдентификаторФайла = Файл.Имя;
	КонецЦикла;

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(Путь);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();//Прочитать();
	Если ДанныеJSON=Неопределено Тогда
		ПоказатьПредупреждение(,"Файл пуст",,"Загрузка файла");
		Возврат;
	КонецЕсли;

	СоотвВидовРабот = ПолучитьСоответствиеВидовРабот();
	СписокНоменклатуры.ПолучитьЭлементы().Очистить();

	КодВерхнУровня = "";
	Этап0 = "";

	Для каждого Строка из ДанныеJSON Цикл
		Если Число(Строка.ПКИ) = 1 Тогда
			ТекНом = НайтиПоКодуERP(Строка);
		Иначе
			ТекНом = НайтиНоменклатуру(Строка);
		КонецЕсли;

		Если Строка.Уровень=0 Тогда
			КодВерхнУровня = Строка.dreva_kod;
			ТекРС = НайтиРС(Строка, Истина);
		Иначе
			ТекРС = НайтиРС(Строка, Ложь);
		КонецЕсли;
		Если Строка.Уровень=-1 Тогда
			Уровень = СписокНоменклатуры.ПолучитьЭлементы().Добавить();
			Уровень.Номенклатура = ТекНом;
			Уровень.НаименованиеИзФайла = Строка.Номенклатурный_Номер + " " + Строка.Наименование;
			Уровень.НомНомерИзФайла = Строка.Номенклатурный_Номер;
			Уровень.НеНайденаНом = не ЗначениеЗаполнено(ТекНом);
			Уровень.НеНайденаСпек = ТекРС = неопределено;
			Уровень.Количество = Строка.Количество_ед;
			Уровень.РС = ТекРС;
			Уровень.СпособПолучения = Строка.Способы_получения_материала;
			Уровень.dreva_kod = Строка.dreva_kod;
			КодВерхнУровня = Строка.dreva_kod;
			НПП = 1;
			Для каждого Операция из Строка.Операции Цикл
				Если Операция.Опер_вспомогательная=1 Тогда
					Продолжить;
				КонецЕсли;
				Уровень0 = Уровень.ПолучитьЭлементы().Добавить();
				Уровень0.Номенклатура = Операция.Этап;
				Уровень0.Опер_наименование_подразделения = Операция.Опер_наименование_подразделения;
				Уровень0.НомерЭтапа = НПП;
				НПП = НПП+1;
				Если не ЗначениеЗаполнено(Этап0) Тогда
					Уровень0.ОснЭтап = Операция.Этап;
					Этап0 = Операция.Этап;
				КонецЕсли;

				//Уровень0.НаименованиеИзФайла = Строка.Номенклатурный_Номер + " " + Строка.Наименование;
				//Уровень0.НомНомерИзФайла = Строка.Номенклатурный_Номер;
				//Уровень0.НеНайденаНом = ТекНом = неопределено;
				//Уровень0.НеНайденаСпек = ТекРС = неопределено;
			КонецЦикла;
			//Если Уровень.ПКИ = 1 Тогда
			//	Если НЕ ЗначениеЗаполнено(ТекНом) Тогда
			//		НовСтрТЗ = тзМат.Добавить();
			//		НовСтрТЗ.НаименованиеИзФайла = Строка.Наименование;
			//		НовСтрТЗ.НомНомерИзФайла = Строка.Номенклатурный_Номер;
			//		НовСтрТЗ.Количество = Строка.Количество_ед;
			//		НовСтрТЗ.ГУИД = Уровень.ГУИД;
			//	КонецЕсли;
			//КонецЕсли;
		Иначе
			Если Строка.dreva_kod = КодВерхнУровня Тогда
				КодРодителя = "";
			Иначе
				КодРодителя = ПолучитьКодРодителя(Строка.dreva_kod);
			КонецЕсли;
			Если Строка.dreva_kod = КодВерхнУровня Тогда
			//	УровеньП = НайтиУровеньПоОснЭтапу(Этап0, СписокНоменклатуры);
			//	Уровень1 = УровеньП.ПолучитьЭлементы().Добавить();
				Уровень1 = СписокНоменклатуры.ПолучитьЭлементы().Добавить();;
			Иначе
				УровеньП = НайтиУровеньПоКоду(КодРодителя, СписокНоменклатуры);
				Если УровеньП=Неопределено Тогда
					УровеньП = СписокНоменклатуры.ПолучитьЭлементы()[0];
					//Сообщить("Не найден уровень "+КодРодителя+" номенклатура "+Строка.Наименование+" "+Строка.Номенклатурный_Номер+" помещена в основную спецификацию!");
					ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + "Не найден уровень "+КодРодителя+" номенклатура "+Строка.Наименование+" "+Строка.Номенклатурный_Номер+" помещена в основную спецификацию!");
				КонецЕсли;
				Уровень1 = УровеньП.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			Уровень1.Номенклатура = ТекНом;
			Уровень1.НаименованиеИзФайла = Строка.Наименование;
			Уровень1.НомНомерИзФайла = Строка.Номенклатурный_Номер;
			Уровень1.НеНайденаНом = не ЗначениеЗаполнено(ТекНом);
			Уровень1.СпособПолучения = Строка.Способы_получения_материала;
			Уровень1.Количество = Строка.Количество_ед;
			Уровень1.dreva_kod = Строка.dreva_kod;
			Уровень1.КодРодителя = КодРодителя;
			Уровень1.ПКИ = Число(Строка.ПКИ);
			Уровень1.ГУИД = Новый УникальныйИдентификатор();
			ЗначГУИД = Уровень1.ГУИД;
			Если УровеньП<>Неопределено Тогда
				Уровень1.Этап = УровеньП.ОснЭтап;
				Уровень1.Опер_наименование_подразделения = УровеньП.Опер_наименование_подразделения;
			КонецЕсли;
			Если Уровень1.ПКИ = 1 Тогда
				Если НЕ ЗначениеЗаполнено(ТекНом) Тогда
					Если НЕ НайденыСтроки(ЗначГУИД) Тогда
						НовСтрТЗ = тзМат.Добавить();
						НовСтрТЗ.НаименованиеИзФайла = Строка.Наименование;
						НовСтрТЗ.НомНомерИзФайла = Строка.Номенклатурный_Номер;
						НовСтрТЗ.Количество = Строка.Количество_ед;
						НовСтрТЗ.ГУИД = ЗначГУИД;
						НовСтрТЗ.ПКИ = Уровень1.ПКИ;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Строка.Способы_получения_материала<>"Обеспечивать" Тогда
				ТекРС = НайтиРС(Строка, Ложь);
				Уровень1.НеНайденаСпек = ТекРС = неопределено;
				Уровень1.РС = ТекРС;
				Уровень1.НаименованиеИзФайла = Строка.Номенклатурный_Номер + " " + Строка.Наименование;
				НПП = 1;
				Для каждого Операция из Строка.Операции Цикл
					ОперИмя = Операция.Этап;
					Если Операция.Материалы.Количество()=0 Тогда
						Если Операция.Опер_вспомогательная=1 Тогда
							Продолжить;
						КонецЕсли;
						Уровень1.ОснЭтап = ?(Уровень1.ОснЭтап="", ОперИмя, Уровень1.ОснЭтап);
						Уровень2 = Уровень1.ПолучитьЭлементы().Добавить();
						Если СоотвВидовРабот[Операция.Опер_профессия_наименование] = Неопределено Тогда
							Уровень2.Номенклатура = ОперИмя;
						Иначе
							Уровень2.Номенклатура = СоотвВидовРабот[Операция.Опер_профессия_наименование];
						КонецЕсли;
						Уровень2.НаименованиеИзФайла = Операция.Опер_наименование;
						Уровень2.Этап = ОперИмя;
						Уровень2.Опер_наименование_подразделения = Операция.Опер_наименование_подразделения;
						Уровень2.НомерЭтапа = НПП;
						НПП = НПП+1;
						Уровень2.ВидРабот = СоотвВидовРабот[Операция.Опер_профессия_наименование];
						Уровень2.Количество = Операция.Опер_Тшт_ед;
						Уровень2.ПКИ = Число(Строка.ПКИ);
					Иначе
						Если Операция.Опер_вспомогательная=1 Тогда
							Продолжить;
						КонецЕсли;
						Уровень1.ОснЭтап = ?(Уровень1.ОснЭтап="", ОперИмя, Уровень1.ОснЭтап);
						Уровень2 = Уровень1.ПолучитьЭлементы().Добавить();
						Если СоотвВидовРабот[Операция.Опер_профессия_наименование] = Неопределено Тогда
							Уровень2.Номенклатура = ОперИмя;
						Иначе
							Уровень2.Номенклатура = СоотвВидовРабот[Операция.Опер_профессия_наименование];
						КонецЕсли;
						Уровень2.НаименованиеИзФайла = СоотвВидовРабот[Операция.Опер_профессия_наименование];
						Уровень2.НомНомерИзФайла = Операция.Опер_РЦ_наименование;
						Уровень2.Этап = ОперИмя;
						Уровень2.Опер_наименование_подразделения = Операция.Опер_наименование_подразделения;
						Уровень2.НомерЭтапа = НПП;
						НПП = НПП+1;
						Уровень2.ВидРабот = СоотвВидовРабот[Операция.Опер_профессия_наименование];
						Уровень2.Количество = Операция.Опер_Тшт_ед;
						Уровень2.ПКИ = Число(Строка.ПКИ);
						Для каждого Материал из Операция.Материалы Цикл
							ТекНом = НайтиМатериал(Материал);
							Уровень3 = Уровень2.ПолучитьЭлементы().Добавить();
							Уровень3.НеНайденаНом = не ЗначениеЗаполнено(ТекНом);
							Уровень3.Номенклатура = ТекНом;
							Уровень3.НаименованиеИзФайла = Материал.Мат_наименование;
							Уровень3.НомНомерИзФайла = Материал.Мат_код;
							//Уровень3.Этап = ОперИмя;
							//Уровень3.ВидРабот = СоотвВидовРабот[Операция.Опер_профессия_наименование];
							Уровень3.Количество = Число(Материал.Мат_норма_ед);
							Уровень3.ЕдИзм = Материал.Мат_ед_изм;
							Уровень3.ЭтоМат = Истина;
							Уровень3.ПКИ = Число(Строка.ПКИ);
							Уровень3.ГУИД = Новый УникальныйИдентификатор();
							ЗначГУИД = Уровень3.ГУИД;
							Если НЕ ЗначениеЗаполнено(ТекНом) Тогда
								Если НЕ НайденыСтроки(ЗначГУИД) Тогда
									НовСтрТЗ = тзМат.Добавить();
									НовСтрТЗ.НаименованиеИзФайла = Материал.Мат_наименование;
									НовСтрТЗ.НомНомерИзФайла = Материал.Мат_код;
									НовСтрТЗ.Количество = Число(Материал.Мат_норма_ед);
									НовСтрТЗ.ЕдИзм = Материал.Мат_ед_изм;
									НовСтрТЗ.ГУИД = ЗначГУИД;
									НовСтрТЗ.ПКИ = Уровень3.ПКИ;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//Сообщить(""+ТекНом+"; "+Строка.Наименование+" "+Строка.Номенклатурный_Номер);
	КонецЦикла;

	//РаскидатьНомПоДереву();

	//ЗагрузитьНаСервере();
	Если ЗначениеЗаполнено(тзМат) Тогда
		Элементы.ТаблицаЗнч.Видимость = Истина;
		Элементы.ТаблицаЗнч.Заголовок = "Материалы(" + Строка(тзМат.Количество()) + ")";
		Элементы.Вкладки.ТекущаяСтраница = Элементы.ТаблицаЗнч;
	Иначе
		Элементы.ТаблицаЗнч.Видимость = Ложь;
		Элементы.ТаблицаЗнч.Заголовок = "Материалы(0)";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НайденыСтроки(ЗначГУИД)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ГУИД", ЗначГУИД);
	НайдСтр = тзМат.НайтиСтроки(ПараметрыОтбора);
	Если ЗначениеЗаполнено(НайдСтр) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
    Возврат Ложь;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Детали клапана");
	ГруппаАналитическогоУчёта = Справочники.ГруппыАналитическогоУчетаНоменклатуры.НайтиПоНаименованию("Полуфабрикаты клапана");
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя="СписокНоменклатурыРС" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.РесурсныеСпецификации.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.РС));
	ИначеЕсли Поле.Имя="СписокНоменклатурыНоменклатура" Тогда
		СтандартнаяОбработка = Ложь;
		//Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
		////	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Номенклатура));
		//Иначе
			Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбора", ЭтотОбъект);
			ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", Новый Структура("Ключ", Элемент.ТекущиеДанные.Номенклатура),,,,,оп);
		//КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.ВидыРаботСотрудников") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ВидыРаботСотрудников.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Номенклатура));
	КонецЕсли;
	//Элемент.ТекущиеДанные.Номенклатура.ПолучитьФорму("ФормаЭлемента").Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбора(ВыбранноеЗначение, ИсточникВыбора) Экспорт
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Элементы.СписокНоменклатуры.ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
		Элементы.СписокНоменклатуры.ТекущиеДанные.НеНайденаНом = Ложь;
		ВерхнУровень = (СтрДлина(СокрЛП(Элементы.СписокНоменклатуры.ТекущиеДанные.dreva_kod))-1)/2=СтрЧислоВхождений(Элементы.СписокНоменклатуры.ТекущиеДанные.dreva_kod, ".0");
		Элементы.СписокНоменклатуры.ТекущиеДанные.РС = НайтиРСпоНом(ВыбранноеЗначение, ВерхнУровень);
		Элементы.СписокНоменклатуры.ТекущиеДанные.НеНайденаСпек = не ЗначениеЗаполнено(Элементы.СписокНоменклатуры.ТекущиеДанные.РС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаСервере(ВыбУровень, Отказ)
	Уровень = ВыбУровень.ПолучитьЭлементы();
	Если Уровень.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	СписокСозд = "";
	Для Каждого Элемент Из Уровень Цикл								//уровень основной спецификации
		Если Элемент.СпособПолучения = "Произвести по основной спецификации" и не Элемент.НеНайденаСпек и Элемент.КодРодителя = "" Тогда
			Если Элемент.Флаг Тогда
				Отказ.Отказ = 2;
				Отказ.СписокОтк = "Найдена спецификация верхнего уровня ("+Элемент.НаименованиеИзФайла+")! Ни чего создано не будет!";
				Возврат СписокСозд;
			КонецЕсли;
		КонецЕсли;
		Если Элемент.НеНайденаНом Тогда
			//asdavydov ++
			Если Элемент.Флаг Тогда
				Если Число(Элемент.ПКИ) = 0 Тогда
					Если Элемент.ЭтоМат Тогда
						Отказ.СписокОтк = Отказ.СписокОтк + "Не найден материал: "+Элемент.НаименованиеИзФайла+" ";//+" "+Элемент.НомНомерИзФайла;
						Отказ.СписокОтк = Отказ.СписокОтк + "
						|";
						Отказ.Отказ = 1;
						Элементы.СписокНоменклатуры.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();//ПолучитьИдентификаторСтрДерева(Элемент.НаименованиеИзФайла);
						Если Элемент.Количество=0 Тогда
							Отказ.СписокОтк = Отказ.СписокОтк + "По материалу: "+Элемент.НаименованиеИзФайла+" количество = 0 ";//+" "+Элемент.НомНомерИзФайла;
							Отказ.СписокОтк = Отказ.СписокОтк + "
							|";
							Отказ.Отказ = 1;
						КонецЕсли;
					Иначе
						СписокСозд = СписокСозд + "Создастся номенклатура: "+Элемент.НаименованиеИзФайла;
					КонецЕсли;
					СписокСозд = СписокСозд + "
					|";
					//Сообщить("Будет создана номенклатура: "+Элемент.НаименованиеИзФайла+" "+Элемент.НомНомерИзФайла);
				КонецЕсли;
			КонецЕсли;
			//++ asdavydov
		ИначеЕсли Элемент.ЭтоМат и Элемент.Количество=0 Тогда
			Если Элемент.Флаг Тогда
				Если Число(Элемент.ПКИ) = 0 Тогда
					Отказ.СписокОтк = Отказ.СписокОтк + "По материалу: "+Элемент.НаименованиеИзФайла+" количество = 0 ";//+" "+Элемент.НомНомерИзФайла;
					Отказ.СписокОтк = Отказ.СписокОтк + "
					|";
					Отказ.Отказ = 1;
					Элементы.СписокНоменклатуры.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();//ПолучитьИдентификаторСтрДерева(Элемент.НаименованиеИзФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Элемент.СпособПолучения = "Произвести по основной спецификации" и Элемент.НеНайденаСпек Тогда
			Если Элемент.Флаг Тогда
				Если Число(Элемент.ПКИ) = 0 Тогда
					СписокСозд = СписокСозд + "  Создастся спецификация: "+Элемент.НаименованиеИзФайла+" ";
					СписокСозд = СписокСозд + "
					|";
					//Сообщить("  Будет создана спецификация: "+Элемент.НаименованиеИзФайла+" "+Элемент.НомНомерИзФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Уровень1 = Элемент.ПолучитьЭлементы();
		//Для Каждого Элемент1 Из Уровень1 Цикл						//уровень этапа оснойвной спецификации
		//	//Если не ЗначениеЗаполнено(Элемент1.Номенклатура) Тогда
		//	//	Сообщить(" Будет создана номенклатура: "+Элемент1.НаименованиеИзФайла+" "+Элемент1.НомНомерИзФайла);
		//	//КонецЕсли;
		//	Уровень2 = Элемент1.ПолучитьЭлементы();
		//	Для Каждого Элемент2 Из Уровень2 Цикл					//уровень состовляющийх основной спецификации
		//		Если не ЗначениеЗаполнено(Элемент2.Номенклатура) Тогда
		//			СписокСозд = СписокСозд + "   Будет создана номенклатура: "+Элемент2.НаименованиеИзФайла+" "+Элемент2.НомНомерИзФайла;
		//			СписокСозд = СписокСозд + "
		//				|";
		//			//Сообщить("  Будет создана номенклатура: "+Элемент2.НаименованиеИзФайла+" "+Элемент2.НомНомерИзФайла);
		//		КонецЕсли;
		//		Если Элемент2.СпособПолучения = "Произвести по основной спецификации" и Элемент2.НеНайденаСпек Тогда
		//			СписокСозд = СписокСозд + "   Будет создана спецификация: "+Элемент2.НаименованиеИзФайла+" "+Элемент2.НомНомерИзФайла;
		//			СписокСозд = СписокСозд + "
		//				|";
		//			//Сообщить("  Будет создана спецификация: "+Элемент2.НаименованиеИзФайла+" "+Элемент2.НомНомерИзФайла);
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;
		СписокСозд = СписокСозд+ПроверитьНаСервере(Элемент, Отказ);
	КонецЦикла;
	Возврат СписокСозд;
КонецФункции

&НаСервере
Функция СоздатьНоменклатуру(Элемент)
	Если Элемент.НомЗаписана Тогда
		Возврат Элемент.НаименованиеИзФайла;
	КонецЕсли;

	Если Число(Элемент.ПКИ) = 1 Тогда
		Сообщить("Покупная позиция. " + Элемент.НаименованиеИзФайла + " не созадана!");
		ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + "Покупная позиция. " + Элемент.НаименованиеИзФайла + " не созадана!");
		Элемент.НомЗаписана = Истина;
		Возврат Элемент.НаименованиеИзФайла;
	КонецЕсли;
	СпрНом = Справочники.Номенклатура.СоздатьЭлемент();
	СпрНом.ОбменДанными.Загрузка = Истина;
	СпрНом.Наименование = Элемент.НаименованиеИзФайла;
	СпрНом.Артикул = Элемент.НомНомерИзФайла;
	СпрНом.ВидНоменклатуры = ВидНоменклатуры;
	СпрНом.ГруппаАналитическогоУчета = ГруппаАналитическогоУчёта;
	СпрНом.ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("Детали клапана");
	СпрНом.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	СпрНом.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("Штука");
	СпрНом.ЕдиницаДляОтчетов = СпрНом.ЕдиницаИзмерения;
	СпрНом.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("ПеречислениеСтавкаНДС", Перечисления.СтавкиНДС.НДС20);
	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(СпрНом,
																	Ложь,
																	Ложь,
																	ВидНоменклатуры,
																	Ложь);
	СпрНом.УстановитьНовыйКод();
	СпрНом.Записать();
	Сообщить("Создана номенклатура: "+ СпрНом);
	ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Создана номенклатура: "+СпрНом);
	Возврат СпрНом.Ссылка;
КонецФункции

//asdavydov ++
&НаСервере
Функция ПроверитьНоменклатуруНаДубли(Элемент)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И НЕ Номенклатура.ПометкаУдаления";

	Запрос.УстановитьПараметр("Артикул", Элемент.НомНомерИзФайла);

	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать();

	Если ВыборкаНоменклатуры.Следующий() Тогда
		Возврат ИСТИНА;
	КонецЕсли;

	Возврат ЛОЖЬ;
КонецФункции
//++ asdavydov

&НаСервере
Функция НайтиЭтап(РесСпек, Этап)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭтапыПроизводства.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	                      |ГДЕ
	                      |	ЭтапыПроизводства.Наименование = &Наименование
	                      |	И ЭтапыПроизводства.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Наименование", Этап);
	Запрос.УстановитьПараметр("Владелец", РесСпек);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция СоздатьСпецификацию(ОснНом, Элемент, ОсновнаяСпек=0, Этап)
	СпрРС = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
	СпрРС.Наименование = Элемент.НаименованиеИзФайла;
	СпрРС.ОсновноеИзделиеНоменклатура = ОснНом;
	СпрРС.ОсновноеИзделиеКоличествоУпаковок = 1;//Элемент.Количество;
	СпрРС.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	СпрРС.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//СпрРС.ОтветственноеПодразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Планово-диспетчерский отдел Производства (Пауэрз)");
	СпрРС.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
	СпрРС.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры;
	СпрРС.ВариантПодбораВДокументы = Перечисления.ВариантыПодбораСпецификацииВДокументы.Автоматически;
	СтрВИ = СпрРС.ВыходныеИзделия.Добавить();
	СтрВИ.Номенклатура = ОснНом;
	СтрВи.КоличествоУпаковок = 1;//Элемент.Количество;
	СтрВИ.ОбработатьПоСпецификации = Истина;
	СтрВИ.ДоляСтоимости = 100;
	СпрРС.Записать();
	РегСпец = РегистрыСведений.ЗначенияПараметровНазначенияСпецификаций.СоздатьМенеджерЗаписи();
	РегСпец.Спецификация = СпрРС.Ссылка;
	РегСпец.ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер;
	РегСпец.Условие = "Равно";
	РегСпец.Значение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Планово-диспетчерский отдел Производства (Пауэрз)");
	РегСпец.Записать(Истина);
	Элемент.РС = СпрРС.Ссылка;
	Уровень1 = Элемент.ПолучитьЭлементы();
	НПП = 1;
	ПредЭтап = Неопределено;
	Для Каждого Элемент1 Из Уровень1 Цикл
		Если ОсновнаяСпек=1 Тогда
			ЭтапО = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
			ЭтапО.Владелец = СпрРС.Ссылка;
			ЭтапО.Наименование = Элемент1.Номенклатура;
			ЭтапО.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Сборочный цех Производства (Пауэрз)");
			ЭтапО.ЕдиницаИзмеренияПредварительногоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Минута;
			ЭтапО.ЕдиницаИзмеренияЗавершающегоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Минута;
			ЭтапО.ЕдиницаИзмеренияДлительностиЭтапа = Перечисления.ЕдиницыИзмеренияВремени.Минута;
			ЭтапО.НомерЭтапа = НПП;
			Если ПредЭтап<>Неопределено Тогда
				ПредЭтап.НомерСледующегоЭтапа = НПП;
				ПредЭтап.Записать();
			КонецЕсли;
			НПП = НПП+1;
			//ЭтапО.ДлительностьЭтапа =
			ПредЭтап = ЭтапО;
			ЭтапО.Записать();
			//Если не ЗначениеЗаполнено(Этап) Тогда
				Этап = ЭтапО.Ссылка;
			//КонецЕсли;
		Иначе
			Этап = Справочники.ЭтапыПроизводства.НайтиПоНаименованию(Элемент1.Этап,,,СпрРС.Ссылка);
			Если Этап = Неопределено Тогда
				ЭтапО = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
				ЭтапО.Владелец = СпрРС.Ссылка;
				ЭтапО.Наименование = Элемент1.Этап;
				ЭтапО.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Сборочный цех Производства (Пауэрз)");
				ЭтапО.НомерЭтапа = Элемент1.НомерЭтапа;
				//ЭтапО.ДлительностьЭтапа =
				ЭтапО.Записать();
				Этап = ЭтапО.Ссылка;
			КонецЕсли;

			СтрТрудозатраты = СпрРС.Трудозатраты.Добавить();
			СтрТрудозатраты.ВидРабот = Элемент1.Номенклатура;
			СтрТрудозатраты.Количество = Элемент1.Количество;
			СтрТрудозатраты.ЭтапРедактирование = Этап;
			СтрТрудозатраты.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Основной ФОТ");
			Уровень2 = Элемент1.ПолучитьЭлементы();
			Для Каждого Элемент2 Из Уровень2 Цикл
				ТекНом = Элемент2.Номенклатура;
				Если не ЗначениеЗаполнено(ТекНом) Тогда

				КонецЕсли;
				СтрМат = СпрРС.МатериалыИУслуги.Добавить();
				СтрМат.Номенклатура = ТекНом;
				СтрМат.КоличествоУпаковок = Элемент2.Количество;
				СтрМат.ЭтапРедактирование = Этап;
				СтрМат.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
				СтрМат.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Сырье")
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//СтрВИ.ЭтапРедактирование = Этап;
	СпрРС.ОсновноеИзделиеЭтап = Этап;
	//asdavydov ++
	СпрРС.Статус = Перечисления.СтатусыСпецификаций.ВРазработке;
	СпрРС.ОсновноеИзделиеХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	//++ asdavydov
	СпрРС.Записать();
	Возврат СпрРС;
КонецФункции

//asdavydov ++
&НаСервере
Функция СоздатьСпецификациюДоп(ОснНом,Элемент)

	Уровень1 = Элемент.ПолучитьЭлементы();
	Если Уровень1.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Для Каждого Элемент1 Из Уровень1 Цикл
		Если ТипЗнч(Элемент1.Номенклатура)=Тип("Строка") ИЛИ ТипЗнч(Элемент1.Номенклатура)=Тип("СправочникСсылка.ВидыРаботСотрудников") Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент1.Флаг и НЕ ЗначениеЗаполнено(Элемент1.Номенклатура) Тогда
			Если НЕ ПроверитьНоменклатуруНаДубли(Элемент1) Тогда
				ОснНом = СоздатьНоменклатуру(Элемент1);
				Элемент1.Номенклатура = ОснНом;
			КонецЕсли;
		КонецЕсли;
		ОснНом = Элемент1.Номенклатура;
		РСЗаписан = Элемент1.РСЗаписан;
		Если НЕ РСЗаписан Тогда
			ОснРС = СоздатьСпецификациюРекурсивно(ОснНом, Элемент1);
		КонецЕсли;
		СоздатьСпецификациюДоп(ОснНом,Элемент1);
	КонецЦикла;
КонецФункции
//++ asdavydov

&НаСервере
Функция СоздатьСпецификациюРекурсивно(ОснНом, Элемент)
	Если НЕ Элемент.Флаг Тогда
		Если Число(Элемент.ПКИ) = 1 Тогда
			Возврат Элемент.НаименованиеИзФайла;
		КонецЕсли;
		СпрРС = Элемент.РС;
		Возврат СпрРС;
	КонецЕсли;
	Если Число(Элемент.ПКИ) = 1 Тогда
		Элемент.НомЗаписана = Истина;
		Возврат Элемент.НаименованиеИзФайла;
	КонецЕсли;
	//Если НЕ Элемент.НеНайденаСпек Тогда
	//	ДокРС = Элемент.РС;
	//	Возврат ВнестиИзмененияВРС(ДокРС);
	//КонецЕсли;
	СпрРС = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
	Если ЭтотОбъект.ДатаНачала <> Дата("01.01.0001 0:00:00") И ЭтотОбъект.ДатаОкончания <> Дата("01.01.0001 0:00:00") Тогда
		СпрРС.НачалоДействия = ЭтотОбъект.ДатаНачала;
		СпрРС.КонецДействия = ЭтотОбъект.ДатаОкончания;
		ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Изменен период действия спецификации" + СпрРС);
	КонецЕсли;
	СпрРС.Наименование = Элемент.НаименованиеИзФайла;
	СпрРС.ОсновноеИзделиеНоменклатура = ОснНом;
	СпрРС.ОсновноеИзделиеКоличествоУпаковок = 1;//Элемент.Количество;
	СпрРС.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	СпрРС.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	СпрРС.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
	//СпрРС.ОтветственноеПодразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Планово-диспетчерский отдел Производства (Пауэрз)");
	СпрРС.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры;
	СпрРС.ВариантПодбораВДокументы = Перечисления.ВариантыПодбораСпецификацииВДокументы.Автоматически;
	СтрВИ = СпрРС.ВыходныеИзделия.Добавить();
	СтрВИ.Номенклатура = ОснНом;
	СтрВИ.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	СтрВИ.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	СтрВи.КоличествоУпаковок = 1;//Элемент.Количество;
	СтрВИ.ОбработатьПоСпецификации = Ложь;
	СтрВИ.ДоляСтоимости = 100;
	СпрРС.Записать();
	РегСпец = РегистрыСведений.ЗначенияПараметровНазначенияСпецификаций.СоздатьМенеджерЗаписи();
	РегСпец.Спецификация = СпрРС.Ссылка;
	РегСпец.ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер;
	РегСпец.Условие = "Равно";
	РегСпец.Значение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Планово-диспетчерский отдел Производства (Пауэрз)");
	РегСпец.Записать(Истина);
	Элемент.РС = СпрРС.Ссылка;

	НПП = 1;
	ПредЭтап = Неопределено;
	ОснЭтап = Неопределено;
	Уровень1 = Элемент.ПолучитьЭлементы();
	Для Каждого Элемент1 Из Уровень1 Цикл
		//Если ОсновнаяСпек=1 Тогда
		//	ЭтапО = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
		//	ЭтапО.Владелец = СпрРС.Ссылка;
		//	ЭтапО.Наименование = Элемент1.Номенклатура;
		//	ЭтапО.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Сборочный цех Производства (Пауэрз)");
		//	//ЭтапО.ДлительностьЭтапа =
		//	ЭтапО.Записать();
		//	Этап = ЭтапО.Ссылка;
		//Если НЕ Элемент1.Флаг Тогда
		//	Продолжить;
		//КонецЕсли;
		Если ТипЗнч(Элемент1.Номенклатура)=Тип("Строка") Тогда
			Этап = Справочники.ЭтапыПроизводства.НайтиПоНаименованию(Элемент1.Этап,,,СпрРС.Ссылка);
			Если Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка() Тогда
				ЭтапО = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
				ЭтапО.Владелец = СпрРС.Ссылка;
				ЭтапО.Наименование = Элемент1.Этап;
				ВыбПодразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(Элемент1.Опер_наименование_подразделения);
				ВыбПодразделение = ?(ВыбПодразделение=Неопределено, Справочники.СтруктураПредприятия.НайтиПоНаименованию("Сборочный цех Производства (Пауэрз)"), ВыбПодразделение);
				ЭтапО.Подразделение = ВыбПодразделение;
				ЭтапО.НомерЭтапа = НПП;
				ЭтапО.ЕдиницаИзмеренияПредварительногоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Минута;
				ЭтапО.ЕдиницаИзмеренияЗавершающегоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Минута;
				ЭтапО.ЕдиницаИзмеренияДлительностиЭтапа = Перечисления.ЕдиницыИзмеренияВремени.Минута;
				Если ПредЭтап<>Неопределено Тогда
					ПредЭтап.НомерСледующегоЭтапа = НПП;
					ПредЭтап.Записать();
				КонецЕсли;
				НПП = НПП+1;
				//ЭтапО.ДлительностьЭтапа =
				ЭтапО.Записать();
				ПредЭтап = ЭтапО;
				Этап = ЭтапО.Ссылка;
				//Если ОснЭтап = Неопределено Тогда
				ОснЭтап = Этап;
				//КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент1.Номенклатура)=Тип("СправочникСсылка.ВидыРаботСотрудников") Тогда

			Этап = Справочники.ЭтапыПроизводства.НайтиПоНаименованию(Элемент1.Этап,,,СпрРС.Ссылка);
			Если Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка() Тогда
				ЭтапО = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
				ЭтапО.Владелец = СпрРС.Ссылка;
				ЭтапО.Наименование = Элемент1.Этап;
				ВыбПодразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(Элемент1.Опер_наименование_подразделения);
				ВыбПодразделение = ?(ВыбПодразделение=Неопределено, Справочники.СтруктураПредприятия.НайтиПоНаименованию("Сборочный цех Производства (Пауэрз)"), ВыбПодразделение);
				ЭтапО.Подразделение = ВыбПодразделение;
				ЭтапО.НомерЭтапа = НПП;
				ЭтапО.ЕдиницаИзмеренияПредварительногоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Минута;
				ЭтапО.ЕдиницаИзмеренияЗавершающегоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Минута;
				ЭтапО.ЕдиницаИзмеренияДлительностиЭтапа = Перечисления.ЕдиницыИзмеренияВремени.Минута;
				Если ПредЭтап<>Неопределено Тогда
					ПредЭтап.НомерСледующегоЭтапа = НПП;
					ПредЭтап.Записать();
				КонецЕсли;
				НПП = НПП+1;
				//ЭтапО.ДлительностьЭтапа =
				ЭтапО.Записать();
				ПредЭтап = ЭтапО;
				Этап = ЭтапО.Ссылка;
				//Если ОснЭтап = Неопределено Тогда
				ОснЭтап = Этап;
				//КонецЕсли;
			КонецЕсли;
			СтрТрудозатраты = СпрРС.Трудозатраты.Добавить();
			СтрТрудозатраты.ВидРабот = Элемент1.Номенклатура;
			СтрТрудозатраты.Количество = Элемент1.Количество;
			//СтрТрудозатраты.Этап = Этап;
			СтрТрудозатраты.ЭтапРедактирование = Этап;
			СтрТрудозатраты.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Основной ФОТ");
			Уровень2 = Элемент1.ПолучитьЭлементы();
			Для Каждого Элемент2 Из Уровень2 Цикл
				//Если НЕ Элемент2.Флаг Тогда
				//	Продолжить;
				//КонецЕсли;
				ТекНом = Элемент2.Номенклатура;
				Если не ЗначениеЗаполнено(ТекНом) Тогда
					ВызватьИсключение("Не найден материал " + Элемент2.НаименованиеИзФайла);
				КонецЕсли;
				СтрМат = СпрРС.МатериалыИУслуги.Добавить();
				СтрМат.Номенклатура = ТекНом;
				СтрМат.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
				СтрМат.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
				СтрМат.КоличествоУпаковок = Элемент2.Количество;
				СтрМат.ЭтапРедактирование = Этап;
				СтрМат.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
				СтрМат.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Сырье");
			КонецЦикла;
		ИначеЕсли Элемент1.СпособПолучения = "Обеспечивать" Тогда
			ТекНом = Элемент1.Номенклатура;
			Если не ЗначениеЗаполнено(ТекНом) Тогда
				Если Число(Элемент1.ПКИ) = 0 Тогда
					Если НЕ ПроверитьНоменклатуруНаДубли(Элемент1) Тогда
						Если Элемент1.Флаг Тогда
							ТекНом = СоздатьНоменклатуру(Элемент1);
							//Сообщить("Создана номенклатура: "+ТекНом);
							//ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Создана номенклатура: "+ТекНом);
							Элемент1.Номенклатура = ТекНом;
						КонецЕсли;
					КонецЕсли;
					//ИначеЕсли Элемент1.Флаг И Число(Элемент1.ПКИ) = 1 Тогда
					//		Сообщить("Покупная позиция. " + Элемент1.НаименованиеИзФайла + " не созадана!");
					//		ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + "Покупная позиция. " + Элемент1.НаименованиеИзФайла + " не созадана!");
				КонецЕсли;
			КонецЕсли;
			СтрМат = СпрРС.МатериалыИУслуги.Добавить();
			СтрМат.Номенклатура = ТекНом;
			СтрМат.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
			СтрМат.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
			СтрМат.КоличествоУпаковок = Элемент1.Количество;
			СтрМат.ЭтапРедактирование = НайтиЭтап(СпрРС.Ссылка, Элемент1.Этап);
			СтрМат.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
			СтрМат.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Сырье")
		Иначе
			ТекНом = Элемент1.Номенклатура;
			Если не ЗначениеЗаполнено(ТекНом) Тогда
				Если Число(Элемент1.ПКИ) = 0 Тогда
					Если НЕ ПроверитьНоменклатуруНаДубли(Элемент1) Тогда
						Если Элемент1.Флаг Тогда
							ТекНом = СоздатьНоменклатуру(Элемент1);
							//Сообщить("Создана номенклатура: "+ТекНом);
							//ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Создана номенклатура: "+ТекНом);
							Элемент1.Номенклатура = ТекНом;
						КонецЕсли;
					КонецЕсли;
					//ИначеЕсли Элемент1.Флаг И Число(Элемент1.ПКИ) = 1 Тогда
					//		Сообщить("Покупная позиция. " + Элемент1.НаименованиеИзФайла + " не созадана!");
					//		ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + "Покупная позиция. " + Элемент1.НаименованиеИзФайла + " не созадана!");
				КонецЕсли;
			КонецЕсли;
			Если СпрРС.МатериалыИУслуги.Найти(ТекНом, "Номенклатура")=Неопределено Тогда
				СтрМат = СпрРС.МатериалыИУслуги.Добавить();
				СтрМат.Номенклатура = ТекНом;
				СтрМат.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
				СтрМат.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
				СтрМат.КоличествоУпаковок = Элемент1.Количество;
				СтрМат.ЭтапРедактирование = НайтиЭтап(СпрРС.Ссылка, Элемент1.Этап);
				СтрМат.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
				СтрМат.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе;
			КонецЕсли;
			Если Элемент1.НеНайденаСпек Тогда
				Если Элемент1.Флаг И Число(Элемент1.ПКИ) = 0 Тогда
					Сообщить("Создаём спецификацию по "+ТекНом);
					ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Создаём спецификацию по "+ТекНом);
					СтрМат.ПроизводитсяВПроцессе = Истина;
					СтрМат.ИсточникПолученияПолуфабриката = СоздатьСпецификациюРекурсивно(ТекНом, Элемент1);
				ИначеЕсли Элемент1.Флаг И Число(Элемент1.ПКИ) = 1 Тогда
					Сообщить("Покупная позиция. Спецификация по номенклатуре" + Элемент1.НаименованиеИзФайла + " не созадана!");
					ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + "Покупная позиция. Спецификация по номенклатуре" + Элемент1.НаименованиеИзФайла + " не созадана!");
				КонецЕсли;
			Иначе
				Сообщить("Найдена спецификация номенклатуры " + Элемент1.Номенклатура + " новая не создана!");
				ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Найдена спецификация номенклатуры " + Элемент1.Номенклатура + " новая не создана!");
				СтрМат.ПроизводитсяВПроцессе = Истина;
				ДокРС = Элемент1.РС;
				СтрМат.ИсточникПолученияПолуфабриката = ВнестиИзмененияВРС(ДокРС);
			КонецЕсли;
			СпрРС.ОсновноеИзделиеХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			СпрРС.Записать();
		КонецЕсли;
	КонецЦикла;
	ТблТрудозатрат = СпрРС.Трудозатраты.Выгрузить();
	ТблТрудозатрат.Свернуть("ВидРабот, ЭтапРедактирование, СтатьяКалькуляции", "Количество");
	СпрРС.Трудозатраты.Загрузить(ТблТрудозатрат);
	//СтрВИ.ЭтапРедактирование = ОснЭтап;
	СпрРС.ОсновноеИзделиеЭтап = ОснЭтап;
	СпрРС.Статус = Перечисления.СтатусыСпецификаций.ВРазработке;
	СпрРС.Записать();
	Элемент.РСЗаписан = Истина;
	Возврат СпрРС.Ссылка;
КонецФункции

//asdavydov ++
&НаСервере
Функция ВнестиИзмененияВРС(ДокРС)
	Если ЭтотОбъект.ДатаНачала <> Дата("01.01.0001 0:00:00") И ЭтотОбъект.ДатаОкончания <> Дата("01.01.0001 0:00:00") Тогда
		Док = ДокРС.ПолучитьОбъект();
		Док.НачалоДействия = Дата(ЭтотОбъект.ДатаНачала);
		Док.КонецДействия = Дата(ЭтотОбъект.ДатаОкончания);
		Попытка
			Док.Записать();
			Сообщить("Изменен период действия спецификации" + ДокРС);
			ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Изменен период действия спецификации" + ДокРС);
		Исключение
			Сообщить("Изменение периода действия спецификации не выполнено. Ошибка " + ОписаниеОшибки());
			ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + "Изменение периода действия спецификации не выполнено. Ошибка " + ОписаниеОшибки());
			Возврат Док.Ссылка;
		КонецПопытки;
		Возврат Док.Ссылка;
	КонецЕсли;
	Возврат ДокРС;
КонецФункции
//++ asdavydov

//asdavydov ++
Процедура ВнестиИзмененияВРСРекурсивно(Элемент)
	Уровень1 = Элемент.ПолучитьЭлементы();
	Если Уровень1.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Элемент1 Из Уровень1 Цикл
		Если Элемент1.ПКИ = 1 Тогда
			Если НЕ Элемент1.Флаг Тогда
				Продолжить;
			КонецЕсли;
			Если Элемент1.НомЗаписана Тогда
				Продолжить;
			КонецЕсли;
			Элемент1.НомЗаписана = Истина;
			Сообщить("Покупная позиция " + Элемент1.НаименованиеИзФайла + " не созадана!");
			ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + "Покупная позиция " + Элемент1.НаименованиеИзФайла + " не созадана!");
			ВнестиИзмененияВРСРекурсивно(Элемент1);
			Продолжить;
		КонецЕсли;
		Если НЕ Элемент1.НеНайденаСпек Тогда
			ДокРС = Элемент1.РС;
			Если ЗначениеЗаполнено(ДокРС) Тогда
				Элемент1.РС = ВнестиИзмененияВРС(ДокРС);
			КонецЕсли;
		КонецЕсли;
		ВнестиИзмененияВРСРекурсивно(Элемент1);
	КонецЦикла;
КонецПроцедуры
//++ asdavydov

&НаСервере
Функция СоздатьНаСервере()
	НачатьТранзакцию();

	Попытка

		Уровень = СписокНоменклатуры.ПолучитьЭлементы();
		СписокСозд = "";
		ОснЭтап = "";
		Для Каждого Элемент Из Уровень Цикл								//уровень основной спецификации
			//asdavydov ++
			ВнестиИзмененияВРСРекурсивно(Элемент);
			//++ asdavydov

			Если Элемент.НеНайденаНом Тогда
				Если Элемент.Флаг Тогда
					Если Число(Элемент.ПКИ) = 0 Тогда
						Если НЕ ПроверитьНоменклатуруНаДубли(Элемент) Тогда
							НомВУ = СоздатьНоменклатуру(Элемент);
							//Сообщить("Создана номенклатура: "+НомВУ);
							//ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Создана номенклатура: "+НомВУ);
							Элемент.Номенклатура = НомВУ;
						КонецЕсли;
					ИначеЕсли Число(Элемент.ПКИ) = 1 Тогда
						Если НЕ Элемент.НомЗаписана Тогда
							Сообщить("Покупная позиция " + Элемент.НаименованиеИзФайла + " не созадана!");
							ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + "Покупная позиция " + Элемент.НаименованиеИзФайла + " не созадана!");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НомВУ = Элемент.Номенклатура;
			КонецЕсли;
			Если Элемент.СпособПолучения = "Произвести по основной спецификации" и Элемент.НеНайденаСпек Тогда
				Если Элемент.Флаг И Число(Элемент.ПКИ) = 0 Тогда
					Сообщить("Создаём спецификацию по "+НомВУ);
					ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Создаём спецификацию по "+НомВУ);
				ИначеЕсли Элемент.Флаг И Число(Элемент.ПКИ) = 1 Тогда
					Сообщить("Покупная позиция. Спецификация по номенклатуре" + Элемент.НаименованиеИзФайла + " не созадана!");
					ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + "Покупная позиция. Спецификация по номенклатуре" + Элемент.НаименованиеИзФайла + " не созадана!");
				КонецЕсли;
				//ОснРС = СоздатьСпецификацию(НомВУ, Элемент, 1, ОснЭтап);
				Если Элемент.Флаг Тогда
					ОснРС = СоздатьСпецификациюРекурсивно(НомВУ, Элемент);
				КонецЕсли;

			Иначе
				Сообщить("Найдена спецификация номенклатуры " + Элемент.Номенклатура + " новая не создана!");
				ЭтотОбъект.ТекстовыйДокумент.ДобавитьСтроку(Строка(ТекущаяДата()) + " Найдена спецификация номенклатуры " + Элемент.Номенклатура + " новая не создана!");
				ОснРС = Элемент.РС.ПолучитьОбъект();
				ДокРС = Элемент.РС;
				ВнестиИзмененияВРС(ДокРС);
			КонецЕсли;
			СоздатьСпецификациюДоп(НомВУ,Элемент);
			//Уровень1 = Элемент.ПолучитьЭлементы();
			//Для Каждого Элемент1 Из Уровень1 Цикл						//уровень этапа оснойвной спецификации
			//	//Если не ЗначениеЗаполнено(Элемент1.Номенклатура) Тогда
			//	//	Сообщить(" Будет создана номенклатура: "+Элемент1.НаименованиеИзФайла+" "+Элемент1.НомНомерИзФайла);
			//	//КонецЕсли;
			//	Уровень2 = Элемент1.ПолучитьЭлементы();
			//	Для Каждого Элемент2 Из Уровень Цикл					//уровень состовляющийх основной спецификации
			//		Если не ЗначениеЗаполнено(Элемент2.Номенклатура) Тогда
			//			Ном = СоздатьНоменклатуру(Элемент2);
			//			Элемент2.Номенклатура = Ном;
			//		Иначе
			//			Ном = Элемент2.Номенклатура;
			//		КонецЕсли;
			//		//ОснРС = Справочники.РесурсныеСпецификации.ПустаяСсылка();		/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			//		Если ОснРС.МатериалыИУслуги.Найти(Ном, "Номенклатура")=Неопределено Тогда
			//			СтрМатОснРС = ОснРС.МатериалыИУслуги.Добавить();
			//			СтрМатОснРС.Номенклатура = Ном;
			//			СтрМатОснРС.ЭтапРедактирование = ОснЭтап;
			//			СтрМатОснРС.КоличествоУпаковок = Элемент2.Количество;
			//			СтрМатОснРС.СпособПолученияМатериала = ?(Элемент2.СпособПолучения = "Произвести по основной спецификации", Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации, Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать);
			//		КонецЕсли;
			//		Если Элемент2.СпособПолучения = "Произвести по основной спецификации" Тогда
			//			СтрМатОснРС.ПроизводитсяВПроцессе = Истина;
			//			СтрМатОснРС.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе;
			//			Если Элемент2.НеНайденаСпек Тогда
			//				СтрМатОснРС.ИсточникПолученияПолуфабриката = СоздатьСпецификациюРекурсивно(Ном, Элемент2);
			//			Иначе
			//				СтрМатОснРС.ИсточникПолученияПолуфабриката = Элемент2.РС;
			//			КонецЕсли;
			//		Иначе
			//			СтрМатОснРС.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Сырье")
			//		КонецЕсли;
			//	КонецЦикла;
			//КонецЦикла;
		КонецЦикла;
		//ОснРС.Записать();
		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	Возврат СписокСозд;
КонецФункции

//asdavydov ++
&НаКлиенте
Процедура УстановитьФлажки()
	ДеревоЗнач = СписокНоменклатуры;
	ИзначальныйФлаг = Истина;
	ОбходСтроки(ДеревоЗнач,ИзначальныйФлаг);
КонецПроцедуры
//++ asdavydov

//asdavydov ++
&НаКлиенте
Процедура СнятьФлажки(ДеревоЗнач)
	 ЭлементыДерева = ДеревоЗнач.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Элемент.Флаг = Ложь;
		СнятьФлажки(Элемент);
	КонецЦикла;
КонецПроцедуры
//++ asdavydov

&НаКлиенте
Процедура Создать(Команда)
	УстановитьФлажки();
	Отказ = Новый Структура;
	Отказ.Вставить("Отказ", 0);
	Отказ.Вставить("СписокОтк", "");
	СписокСозд = ПроверитьНаСервере(СписокНоменклатуры, Отказ);
	Если Отказ.Отказ=0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);

		ПоказатьВопрос(Оповещение, СписокСозд+"Продолжить?", РежимДиалогаВопрос.ДаНет,,,"Создание спецификации")
	ИначеЕсли Отказ.Отказ=1 Тогда
		ПоказатьПредупреждение(,Отказ.СписокОтк,,"Не найдены материалы");
	ИначеЕсли Отказ.Отказ=2 Тогда
		ПоказатьПредупреждение(,Отказ.СписокОтк,,"Найдена основная спецификация");
	КонецЕсли;

КонецПроцедуры

//asdavydov ++
&НаКлиенте
Процедура СоздатьПоСтрокам(Команда)
	Отказ = Новый Структура;
	Отказ.Вставить("Отказ", 0);
	Отказ.Вставить("СписокОтк", "");
	СписокСозд = ПроверитьНаСервере(СписокНоменклатуры, Отказ);
	Если Отказ.Отказ=0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);

		ПоказатьВопрос(Оповещение, СписокСозд+"Продолжить?", РежимДиалогаВопрос.ДаНет,,,"Создание спецификации")
	ИначеЕсли Отказ.Отказ=1 Тогда
		ПоказатьПредупреждение(,Отказ.СписокОтк,,"Не найдены материалы");
	ИначеЕсли Отказ.Отказ=2 Тогда
		ПоказатьПредупреждение(,Отказ.СписокОтк,,"Найдена основная спецификация");
	КонецЕсли;
КонецПроцедуры
//++ asdavydov

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	//asdavydov ++
	Если ЭтотОбъект.СоздатьЛог Тогда
		СоздатьЛогФайл();
	КонецЕсли;
	//++ asdavydov
	СоздатьНаСервере();
	//asdavydov ++
	Если ЭтотОбъект.СоздатьЛог и НЕ НеСоздаватьЛог Тогда
		ЭтотОбъект.ТекстовыйДокумент.Записать(ЭтотОбъект.Путь + Формат(ТекущаяДата(), "ДЛФ=Д") + ".txt");
	КонецЕсли;
	ЭтотОбъект.ТекстовыйДокумент.Очистить();
	ДревоЗнач = СписокНоменклатуры;
	СнятьФлажки(ДревоЗнач);
	//++ asdavydov
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	Уровень = СписокНоменклатуры.ПолучитьЭлементы();
	Для Каждого Элемент Из Уровень Цикл
		Уровень1 = Элемент.ПолучитьЭлементы();
		Для Каждого Элемент1 Из Уровень1 Цикл
			Если ТипЗнч(Элемент1.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
				Элемент1.Этап = ОсновнойЭтап;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыНоменклатураПриИзменении(Элемент)
	Элементы.СписокНоменклатуры.ТекущиеДанные.НеНайденаНом = Ложь;
	ВерхнУровень = (СтрДлина(СокрЛП(Элементы.СписокНоменклатуры.ТекущиеДанные.dreva_kod))-1)/2=СтрЧислоВхождений(Элементы.СписокНоменклатуры.ТекущиеДанные.dreva_kod, ".0");
	Элементы.СписокНоменклатуры.ТекущиеДанные.РС = НайтиРСпоНом(Элементы.СписокНоменклатуры.ТекущиеДанные.Номенклатура, ВерхнУровень);
	Элементы.СписокНоменклатуры.ТекущиеДанные.НеНайденаСпек = не ЗначениеЗаполнено(Элементы.СписокНоменклатуры.ТекущиеДанные.РС);
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Функция УдалитьМатСКол0(ВыбУровень, Отказ)
	Уровень = ВыбУровень.ПолучитьЭлементы();
	Если Уровень.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	СписокСозд = "";
	Для Каждого Элемент Из Уровень Цикл								//уровень основной спецификации
		Если Элемент.НеНайденаНом Тогда
			Если Элемент.ЭтоМат Тогда
				Если Элемент.Количество=0 Тогда
					Уровень.Удалить(Элемент);
				КонецЕсли;
			Иначе
			КонецЕсли;
		ИначеЕсли Элемент.ЭтоМат и Элемент.Количество=0 Тогда
			Уровень.Удалить(Элемент);
		КонецЕсли;
		СписокСозд = СписокСозд+УдалитьМатСКол0(Элемент, Отказ);
	КонецЦикла;
	Возврат СписокСозд;
КонецФункции

&НаКлиенте
Процедура УдалитьМетериалыСКол0(Команда)
	Отказ = 0;
	УдалитьМатСКол0(СписокНоменклатуры, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСпекВерхнУровня(Команда)
	ВерхнУровень = СписокНоменклатуры.ПолучитьЭлементы()[0];
	ВерхнУровень.РС = "";
	ВерхнУровень.НеНайденаСпек = Истина;
КонецПроцедуры

//asdavydov ++
&НаКлиенте
Процедура СписокНоменклатурыФлагПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокНоменклатуры.ТекущиеДанные;
	ИзначальныйФлаг = ТекСтрока.Флаг;
	ОбходСтроки(ТекСтрока,ИзначальныйФлаг);
КонецПроцедуры
//++ asdavydov

//asdavydov ++
&НаКлиенте
Процедура ОбходСтроки(ТекСтрока,ИзначальныйФлаг = Неопределено)
	ЭлементыДерева = ТекСтрока.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если ЭлементыДерева.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Элемент.РС) И НЕ Элемент.ЭтоМат = Истина Тогда
			Если ИзначальныйФлаг = Истина Тогда
				Элемент.Флаг = Истина;
			ИначеЕсли ИзначальныйФлаг = Ложь Тогда
				Элемент.Флаг = Ложь;
			КонецЕсли;
		КонецЕсли;
		ОбходСтроки(Элемент,ИзначальныйФлаг);
	КонецЦикла;
КонецПроцедуры
//++ asdavydov

//asdavydov ++
&НаКлиенте
Процедура  СоздатьЛогФайл()
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Файл данных (*.txt)|*.txt";
	Диалог.Расширение = "txt";
	Диалог.ПолноеИмяФайла = "лог_"+Формат(ТекущаяДата(),"ДЛФ=Д") + "_" + Объект.ИдентификаторФайла;
	Диалог.Заголовок = "Выберите каталог системы для сохранения файла";
	Если Диалог.Выбрать() Тогда
		НеСоздаватьЛог = Ложь;
		ЭтотОбъект.Путь = Диалог.ПолноеИмяФайла;
	Иначе
		НеСоздаватьЛог = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры
//++ asdavydov

//asdavydov ++
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ПодтвержденоЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, "Закрыть выгрузку JSON?", РежимДиалогаВопрос.ДаНет)
	КонецЕсли;
КонецПроцедуры
//++ asdavydov

//asdavydov ++
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    ПодтвержденоЗакрытиеФормы = Истина;
    Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьМатериалыРекурсивно(ДеревоЗнач)
	ЭлементыДерева = ДеревоЗнач.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ЭтоМат ИЛИ Элемент.ПКИ = 1 Тогда
			Если НЕ ЗначениеЗаполнено(Элемент.Номенклатура) Тогда
				Элемент.Номенклатура = ПоискПоТз(Элемент);
			КонецЕсли;
		КонецЕсли;
		ПересчитатьМатериалыРекурсивно(Элемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПоискПоТз(Элемент)
	Для Каждого Стр из тзМат Цикл
		Если Элемент.ГУИД = Стр.ГУИД Тогда
			Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				Стр.СтрОбработана = Истина;
			КонецЕсли;
			Возврат Стр.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ПересчитатьМатериалы(Команда)
	ДеревоЗнач = СписокНоменклатуры;
	ПересчитатьМатериалыРекурсивно(ДеревоЗнач);
КонецПроцедуры

&НаКлиенте
Процедура тзМатНоменклатураПриИзменении(Элемент)
	ТекДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	Для Каждого Стр из тзМат Цикл
		Если Стр.НомНомерИзФайла = ТекДанные.НомНомерИзФайла Тогда
			Стр.Номенклатура = ТекДанные.Номенклатура;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//++ asdavydov













